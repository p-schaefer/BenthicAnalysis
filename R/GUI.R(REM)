fontHeading <- tkfont.create(family="times",size=16,weight="bold",slant="italic")
fontSubHeading <- tkfont.create(family="times",size=13,weight="bold")
fontTextLabel <- tkfont.create(family="times",size=12)

get.taxa.b <- function() {
  name<<- tclvalue(tkgetOpenFile())
  taxa<<-read.csv(name,header=T,row.names=NULL)
  n.taxa<<-ncol(taxa)-2
  colnames(taxa)[1:2]<<-c("Site","Year")
  taxa<<-transform(taxa,names=paste0(Site,"_",Year))
  rownames(taxa)<<-make.unique(as.character(taxa$names))
  taxa<<-taxa[rownames(taxa[(rowSums(taxa[,3:(n.taxa+2)]))>3,]),]
  taxa<<-taxa[rownames(taxa[(rowSums(decostand(taxa[,3:(n.taxa+2)],method="pa")))>2,]),]
  taxa.pa<<-decostand(taxa[,3:(n.taxa+2)],method="pa")
}

get.taxa.f <- function() {
  name<<- tclvalue(tkgetOpenFile())
  taxa<<-read.csv(name,header=T,row.names=NULL)
  n.taxa<<-ncol(taxa)-3
  colnames(taxa)[1:3]<<-c("Site","Year","Effort")
  taxa<<-transform(taxa,names=paste0(Site,"_",Year))
  rownames(taxa)<<-make.unique(as.character(taxa$names))
  effort<<-taxa[,3]
  names(effort)<<-rownames(taxa)
  taxa<<-taxa[,-c(3)]
  taxa<<-taxa[rownames(taxa[(rowSums(taxa[,3:(n.taxa+2)]))>=1 & (rowSums(taxa[,3:(n.taxa+2)]))<600,]),]
  taxa<<-taxa[rownames(taxa[(rowSums(decostand(taxa[,3:(n.taxa+2)],method="pa")))>=1,]),]
  taxa.pa<<-decostand(taxa[,3:(n.taxa+2)],method="pa")
  effort<<-effort[rownames(taxa)]
}


show.taxa <- function () {
  print(tclArrayVar(taxa))
}

get.weights <- function() {
  name.w<<- tclvalue(tkgetOpenFile())
  weights1<<-read.csv(name.w,header=T,row.names=NULL)
  #assign("taxa", taxa, envir = .GlobalEnv)
  colnames(weights1)[1:2]<<-c("Site","Year")
  weights1<<-transform(weights1,names=paste0(Site,"_",Year))
  rownames(weights1)<<-make.unique(as.character(weights1$names))
}

show.weight <- function () {
  print(tclArrayVar(weights1))
}

get.nn.sites <- function() {
  name.nn.sites <<- tclvalue(tkgetOpenFile())
  ref.sel<<-read.csv(name.nn.sites,header=T,row.names=1)
}
show.nn.sites <- function() {
  print(tclArrayVar(ref.sel))
}

get.pred.var <- function() {
  name.pred.var <<- tclvalue(tkgetOpenFile())
  pred.var<<-read.csv(name.pred.var,header=T,row.names=1)
}
show.pred.var <- function() {
  print(tclArrayVar(pred.var))
}

get.cor.var <- function() {
  name.cor.var <<- tclvalue(tkgetOpenFile())
  cor.var<<-read.csv(name.cor.var,header=T,row.names=1)
}
show.cor.var <- function() {
  print(tclArrayVar(cor.var))
}

get.results.folder <- function() {
  name.results.folder <<- tk_choose.dir(default = "", caption = "Select directory")
}

get.fish.info <- function() {
  fish.sp <<- tclvalue(tkgetOpenFile())
}

get.HSI <- function() {
  benth.sp <<- tclvalue(tkgetOpenFile())
}

get.map.folder <- function() {
  map.folder <<- tk_choose.dir(default = "", caption = "Select directory")
}


BMI.vs.Fish <- function() {
  rbVal<<- as.character(tclvalue(rbValue))
  tkdestroy(ttmain)
  if (rbVal=="BMI") {
    Benthic.ss<<-T
    Fish.ss<<-F
    ttmain1<<- tktoplevel()
    tktitle(ttmain1)<<-"Benthic Macroinvertebrate RCA"
    tkgrid(tklabel(ttmain1,text=" "))
    tkgrid(tklabel(ttmain1,text="Input Biological Data",font=fontSubHeading),sticky="w")
    tkgrid(tklabel(ttmain1,text=" "))
    tkgrid(tkbutton(ttmain1, text = "Select Abundance Data", command = get.taxa.b),sticky="w")
    tkgrid(tkbutton(ttmain1, text = "Show Abundance Data", command = show.taxa),sticky="w")
    tkgrid(tklabel(ttmain1,text=" "))
    onok.bmi <- function () {
      Benthic.ss<<-T
      Fish.ss<<-F
      to.nn1()
      return(Benthic.ss)
      return(Fish.ss)
    }
    tkgrid(tkbutton(ttmain1, text = "Done", command = onok.bmi),sticky="w")
    tkfocus(ttmain1)
  }
  if (rbVal=="Fish") {
    Benthic.ss<<-F
    Fish.ss<<-T
    ttmain1<<- tktoplevel()
    tktitle(ttmain1)<<-"Fish RCA (experimental)"
    tkgrid(tklabel(ttmain1,text="Input Biological Data",font=fontSubHeading))
    tkgrid(tklabel(ttmain1,text=" "))
    tkgrid(tkbutton(ttmain1, text = "Select Abundance Data", command = get.taxa.f),tkbutton(ttmain1, text = "Show Abundance Data", command = show.taxa))
    tkgrid(tklabel(ttmain1,text=" "))
    tkgrid(tkbutton(ttmain1, text = "Select Weight Data", command = get.weights),tkbutton(ttmain1, text = "Show Weight Data", command = show.weight))
    tkgrid(tklabel(ttmain1,text=" "))
    onok.fish <- function () {
      Benthic.ss<<-F
      Fish.ss<<-T
      to.nn1()
      return(Benthic.ss)
      return(Fish.ss)
    }
    tkgrid(tkbutton(ttmain1, text = "Done", command = onok.fish))
    tkfocus(ttmain1)

  }
}

to.nn1<- function(){
  if (Fish.ss==T){
    weights1<<-weights1[rownames(taxa),colnames(taxa)]
  }
  tkdestroy(ttmain1)
  ttmain2 <- tktoplevel()
  tktitle(ttmain2)<-"Reference Site Selection"
  tkgrid(tklabel(ttmain2,text="Reference Site Selection Options",font=fontSubHeading),sticky="w")
  tkgrid(tklabel(ttmain2,text=" "))

  override.ref.sel.rb1<- tkradiobutton(ttmain2)
  override.ref.sel.rb0<- tkradiobutton(ttmain2)
  rbValue1<- tclVar("F")
  tkconfigure(override.ref.sel.rb1,variable=rbValue1,value="T")
  tkconfigure(override.ref.sel.rb0,variable=rbValue1,value="F")

  tkgrid(tklabel(ttmain2,text="Manual Reference Site Selection "),override.ref.sel.rb1,tkbutton(ttmain2,text="Matrix of nearest-neighbour sites", command = get.nn.sites),tkbutton(ttmain2, text = "Show nearest-neighbour sites", command = show.nn.sites))
  tkgrid(tklabel(ttmain2,text=" "),tklabel(ttmain2,text=" "),tkbutton(ttmain2,text="Matrix identifying reference sites and test sites",command=get.pred.var),tkbutton(ttmain2,text="Show reference sites and test sites",command=show.pred.var))
  tkgrid(tklabel(ttmain2,text=" "))
  tkgrid(tklabel(ttmain2,text=" "))
  tkgrid(tklabel(ttmain2,text="Automatic Reference Site Selection "),override.ref.sel.rb0,tkbutton(ttmain2,text="Matrix of site matching variables", command = get.pred.var),tkbutton(ttmain2, text = "Show site matching variables", command = show.pred.var))
  tkgrid(tklabel(ttmain2,text=" "))
  tkgrid(tklabel(ttmain2,text=" "))
  onok.nn1 <- function () {
    if (as.character(tclvalue(rbValue1))=="F"){
      override.ref.sel<<-F
    } else {
      override.ref.sel<<-T
    }
    tkdestroy(ttmain2)
    to.nn2()
    return(override.ref.sel)
  }
  tkgrid(tkbutton(ttmain2, text = "Done", command=onok.nn1))
}

to.nn2<- function () {
  ttmain3 <- tktoplevel()
  tktitle(ttmain3)<-"Reference Site Selection"
  tkgrid(tklabel(ttmain3,text="Reference Site Selection Options",font=fontSubHeading))

  if (override.ref.sel==T) {
    testing.year.cutoff1<- tclVar("")
    entry.testing.year.cutoff<-tkentry(ttmain3,width="10",textvariable=testing.year.cutoff1)
    tkgrid(tklabel(ttmain3,text="Year to begin testing reference sites?"),entry.testing.year.cutoff,tklabel(ttmain3,text="Leave at 0 to ignore"))

    exclude.value1<- tclVar("")
    entry.exclude.value<-tkentry(ttmain3,width="10",textvariable=exclude.value1)
    tkgrid(tklabel(ttmain3,text="Exclude a sampling year from all analysis?"),entry.exclude.value,tklabel(ttmain3,text="Can currntly only exclude 1 year at a time - Leave at 0 to ignore"))

    tkgrid(tklabel(ttmain3,text=" "))
    tkgrid(tklabel(ttmain3,text=" "))

    cor.var.cb <- tkcheckbutton(ttmain3)
    cor.var.cbValue <- tclVar("0")
    tkconfigure(cor.var.cb,variable=cor.var.cbValue)
    tkgrid(tklabel(ttmain3,text="Plot supplimental correlated variables?"),cor.var.cb,tkbutton(ttmain3,text="Matrix of correlated variables", command = get.cor.var),tkbutton(ttmain3, text = "Show correlated variables", command = show.cor.var))

    tkgrid(tklabel(ttmain3,text=" "))
    tkgrid(tklabel(ttmain3,text=" "))

    metric.select.cb<- tkcheckbutton(ttmain3)
    metric.select.cbValue<- tclVar("1")
    tkconfigure(metric.select.cb,variable=metric.select.cbValue)
    tkgrid(tklabel(ttmain3,text="Automatically select metrics which best separate test from reference sites?"),metric.select.cb)

    to.met.sel <-function () {
      tt.met.sel <- tktoplevel()
      tktitle(tt.met.sel)<-"Indicator Metric Selection"
      tkgrid(tklabel(tt.met.sel,text="Indicator Metric Selection",font=fontSubHeading))

      scr <- tkscrollbar(tt.met.sel, repeatinterval=5,command=function(...)tkyview(tl1,...))
      tl1<-tklistbox(tt.met.sel,height=5,width="40",selectmode="multiple",yscrollcommand=function(...)tkset(scr,...),background="white")
      tkgrid.configure(scr,rowspan=4,sticky="nsw")

      tkgrid(tklabel(tt.met.sel,text="Select which metrics to use:"),tl1,scr)
      tkgrid.configure(scr,rowspan=4,sticky="nsw")

      if (Benthic.ss==T) {
        metric.choices <- c("Richness","Simpson","Percent.Oligochaeta",
                            "Percent.Chironomidae","Percent.Isopoda","Percent.Amphipoda","Percent.EPT.Abundance",
                            "EPT.Richness","Ephemeroptera.Richness","Ephemeroptera.Abundance","Plecoptera.Richness","Plecoptera.Abundance","Trichoptera.Richness","Trichoptera.Abundance",
                            "No.EPT.per.NoEPT.and.Chir","Percent.Non.Chir.Dip","HBI")
        for (i in (1:17))
        {
          tkinsert(tl1,"end",metric.choices[i])
        }

      }
      if (Fish.ss==T) {
        metric.choices <- c("Richness","Simpson","CPUE","BPUE",
                            "Percent.Omnivores","CPUE.Omnivores","BPUE.Omnivores",
                            "Percent.Piscivores","CPUE.Piscivores","BPUE.Piscivores",
                            "Percent.Rhinichthys","Percent.Creek.Chub",
                            "Percent.Warmwater","CPUE.Warmwater","BPUE.Warmwater",
                            "Percent.Coldwater","CPUE.Coldwater","BPUE.Coldwater")
        for (i in (1:18))
        {
          tkinsert(tl1,"end",metric.choices[i])
        }
      }
      tkselection.set(tl1,2)
      done.met.sel <- function () {
        metric.choice<<-metric.choices[as.numeric(tkcurselection(tl1))+1]
        tkdestroy(tt.met.sel)
        tkfocus(ttmain3)
      }
      tkgrid(tkbutton(tt.met.sel,text="Done",command=done.met.sel))
    }

    tkgrid(tkbutton(ttmain3,text="Otherwise select which metrics to use:?",command=to.met.sel))
    #tkgrid(tl1,scr)


    tkgrid(tklabel(ttmain3,text=" "))
    tkgrid(tklabel(ttmain3,text=" "))
    tkgrid(tklabel(ttmain3,text="The following options only affect Corresondance Analysis Results:"))
    k1<- tclVar("0.1")
    entry.k.value<-tkentry(ttmain3,width="5",textvariable=k1)
    tkgrid(tklabel(ttmain3,text="Remove rare species?"),entry.k.value,tklabel(ttmain3,text="% of samples a species must be present (i.e. 0.1 = 10%)"))

    onok.nn2 <- function() {
      TSA<<-T
      testing.year.cutoff<<- as.numeric(tclvalue(testing.year.cutoff1))
      k<<- as.numeric(tclvalue(k1))
      exclude.value<<- as.numeric(tclvalue(exclude.value1))
      if (as.character(tclvalue(metric.select.cbValue))=="1"){
        metric.select<<-T
      } else {
        metric.select<<-F
      }
      if (as.character(tclvalue(cor.var.cbValue))=="1"){
        use.cor.var<<-T
      } else {
        use.cor.var<<-F
      }
      tkdestroy(ttmain3)
      to.plot.options()
      return(TSA)
      return(testing.year.cutoff)
      return(exclude.value)
      return(use.cor.var)
    }

    tkgrid(tklabel(ttmain3,text=" "))
    tkgrid(tklabel(ttmain3,text=" "))

    tkgrid(tkbutton(ttmain3, text = "Done", command=onok.nn2))
    tkfocus(ttmain3)

  }

  if (override.ref.sel==F) {
    tl<-tklistbox(ttmain3,height=4,selectmode="single",background="white")
    tkgrid(tklabel(ttmain3,text="Nearest neighbour site selection method"),tl)
    nn.method.choices<- c("ANNA","Euclidean")
    for (i in (1:2))
    {
      tkinsert(tl,"end",nn.method.choices[i])
    }
    tkselection.set(tl,0)

    Y1 <- tclVar("10")
    entry.Y<-tkentry(ttmain3,width="10",textvariable=Y1)
    tkgrid(tklabel(ttmain3,text="Number of nearest neighbour sites to select"),entry.Y)

    site.selection.cb<- tkcheckbutton(ttmain3)
    site.selection.cbValue<- tclVar("1")
    tkconfigure(site.selection.cb,variable=site.selection.cbValue)
    tkgrid(tklabel(ttmain3,text="Adaptivly select the number of reference sites?"),site.selection.cb,tklabel(ttmain3,text="Uses Jenks Natural breaks to select \nbetween (x-(x-2)) and (x-1) nearest \nreference sites based on Classification variables"))

    testing.year.cutoff1<- tclVar("")
    entry.testing.year.cutoff<-tkentry(ttmain3,width="10",textvariable=testing.year.cutoff1)
    tkgrid(tklabel(ttmain3,text="Year to begin testing reference sites?"),entry.testing.year.cutoff,tklabel(ttmain3,text="Leave at 0 to ignore"))

    exclude.value1<- tclVar("")
    entry.exclude.value<-tkentry(ttmain3,width="10",textvariable=exclude.value1)
    tkgrid(tklabel(ttmain3,text="Exclude a sampling year from all analysis?"),entry.exclude.value,tklabel(ttmain3,text="Can currntly only exclude 1 year at a time - leave at 0 to ignore"))

    tkgrid(tklabel(ttmain3,text=" "))
    tkgrid(tklabel(ttmain3,text=" "))

    cor.var.cb <- tkcheckbutton(ttmain3)
    cor.var.cbValue <- tclVar("0")
    tkconfigure(cor.var.cb,variable=cor.var.cbValue)
    tkgrid(tklabel(ttmain3,text="Plot supplimental correlated variables?"),cor.var.cb,tkbutton(ttmain3,text="Matrix of correlated variables", command = get.cor.var),tkbutton(ttmain3, text = "Show correlated variables", command = show.cor.var))

    tkgrid(tklabel(ttmain3,text=" "))
    tkgrid(tklabel(ttmain3,text=" "))

    metric.select.cb<- tkcheckbutton(ttmain3)
    metric.select.cbValue<- tclVar("1")
    tkconfigure(metric.select.cb,variable=metric.select.cbValue)
    tkgrid(tklabel(ttmain3,text="Automatically select metrics which best separate test from reference sites?"),metric.select.cb)

    to.met.sel <-function () {
      tt.met.sel <- tktoplevel()
      tktitle(tt.met.sel)<-"Indicator Metric Selection"
      tkgrid(tklabel(tt.met.sel,text="Indicator Metric Selection",font=fontSubHeading))

      scr <- tkscrollbar(tt.met.sel, repeatinterval=5,command=function(...)tkyview(tl1,...))
      tl1<-tklistbox(tt.met.sel,height=5,width="40",selectmode="multiple",yscrollcommand=function(...)tkset(scr,...),background="white")

      tkgrid(tklabel(tt.met.sel,text="Select which metrics to use:"),tl1,scr)
      tkgrid.configure(scr,rowspan=4,sticky="nsw")

      if (Benthic.ss==T) {
        metric.choices <- c("Richness","Simpson","Percent.Oligochaeta",
                            "Percent.Chironomidae","Percent.Isopoda","Percent.Amphipoda","Percent.EPT.Abundance",
                            "EPT.Richness","Ephemeroptera.Richness","Ephemeroptera.Abundance","Plecoptera.Richness","Plecoptera.Abundance","Trichoptera.Richness","Trichoptera.Abundance",
                            "No.EPT.per.NoEPT.and.Chir","Percent.Non.Chir.Dip","HBI")
        for (i in (1:17))
        {
          tkinsert(tl1,"end",metric.choices[i])
        }

      }
      if (Fish.ss==T) {
        metric.choices <- c("Richness","Simpson","CPUE","BPUE",
                            "Percent.Omnivores","CPUE.Omnivores","BPUE.Omnivores",
                            "Percent.Piscivores","CPUE.Piscivores","BPUE.Piscivores",
                            "Percent.Rhinichthys","Percent.Creek.Chub",
                            "Percent.Warmwater","CPUE.Warmwater","BPUE.Warmwater",
                            "Percent.Coldwater","CPUE.Coldwater","BPUE.Coldwater")
        for (i in (1:18))
        {
          tkinsert(tl1,"end",metric.choices[i])
        }
      }
      tkselection.set(tl1,2)
      done.met.sel <- function () {
        metric.choice<<-metric.choices[as.numeric(tkcurselection(tl1))+1]
        tkdestroy(tt.met.sel)
        tkfocus(ttmain3)
      }
      tkgrid(tkbutton(tt.met.sel,text="Done",command=done.met.sel))
    }
    tkgrid(tkbutton(ttmain3,text="Otherwise select which metrics to use:?",command=to.met.sel))

    tkgrid(tklabel(ttmain3,text=" "))
    tkgrid(tklabel(ttmain3,text=" "))
    tkgrid(tklabel(ttmain3,text="The following options only affect Corresondance Analysis Results:"))
    k1<- tclVar("0.1")
    entry.k.value<-tkentry(ttmain3,width="5",textvariable=k1)
    tkgrid(tklabel(ttmain3,text="Remove rare species?"),entry.k.value,tklabel(ttmain3,text="% of samples a species must be present (i.e. 0.1 = 10%)"))

    onok.nn2 <- function() {
      TSA<<-T
      testing.year.cutoff<<- as.numeric(tclvalue(testing.year.cutoff1))
      k<<- as.numeric(tclvalue(k1))
      exclude.value<<- as.numeric(tclvalue(exclude.value1))
      Y<<- as.numeric(tclvalue(Y1))

      nn.method<<-nn.method.choices[as.numeric(tkcurselection(tl))+1]
      if (as.character(tclvalue(metric.select.cbValue))=="1"){
        metric.select<<-T
      } else {
        metric.select<<-F
      }
      if (as.character(tclvalue(site.selection.cbValue))=="1"){
        site.selection<<-T
      } else {
        site.selection<<-F
      }

      if (as.character(tclvalue(cor.var.cbValue))=="1"){
        use.cor.var<<-T
      } else {
        use.cor.var<<-F
      }
      tkdestroy(ttmain3)
      to.plot.options()
      return(site.selection)
      return(TSA)
      return(testing.year.cutoff)
      return(exclude.value)
      return(Y)
      return(nn.method)
      return(use.cor.var)
    }

    tkgrid(tklabel(ttmain3,text=" "))
    tkgrid(tklabel(ttmain3,text=" "))

    tkgrid(tkbutton(ttmain3, text = "Done", command=onok.nn2))
    tkfocus(ttmain3)

  }

}


to.plot.options <- function () {
  ttmain4 <- tktoplevel()
  tktitle(ttmain4)<-"Output Options"
  tkgrid(tklabel(ttmain4,text="Configuration Overview",font=fontSubHeading),sticky="w")

  tkgrid(tklabel(ttmain4,text=" "))

  tkgrid(tklabel(ttmain4,text="Abundance Data:"),tklabel(ttmain4,text=paste0(name)))
  if (Fish.ss==T) {
    tkgrid(tklabel(ttmain4,text="Weight Data:"),tklabel(ttmain4,text=paste0(name.w)))
  }
  if (override.ref.sel==T){
    tkgrid(tklabel(ttmain4,text="Nearest neighbour sites:"),tklabel(ttmain4,text=paste0(name.nn.sites)))
    tkgrid(tklabel(ttmain4,text="Identifying test and reference sites:"),tklabel(ttmain4,text=paste0(name.pred.var)))
  }
  if (override.ref.sel==F){
    tkgrid(tklabel(ttmain4,text="Nearest neighbour site selection variables:"),tklabel(ttmain4,text=paste0(name.pred.var)))
    tkgrid(tklabel(ttmain4,text="Nearest neighbour method:"),tklabel(ttmain4,text=paste0(nn.method)))
    tkgrid(tklabel(ttmain4,text="Number of nearest neighbour reference sites to select:"),tklabel(ttmain4,text=paste0(Y)))
  }
  if (use.cor.var==T) {
    tkgrid(tklabel(ttmain4,text="Correlation Variables:"),tklabel(ttmain4,text=paste0(name.cor.var)))
  }
  if (testing.year.cutoff>0) {
    tkgrid(tklabel(ttmain4,text="Year to begin testing reference sites:"),tklabel(ttmain4,text=paste0(testing.year.cutoff)))
  }
  if (exclude.value>0) {
    tkgrid(tklabel(ttmain4,text="Samples to exclude:"),tklabel(ttmain4,text=paste0(exclude.value)))
  }
  if (metric.select==F) {
    tkgrid(tklabel(ttmain4,text="Metrics Selected for Analysis:"),tklabel(ttmain4,text=paste0(metric.choice)))
  }
  if (metric.select==T) {
    tkgrid(tklabel(ttmain4,text="Automatic Metric Selection Enabled"))
  }

  tkgrid(tklabel(ttmain4,text=" "))
  tkgrid(tklabel(ttmain4,text=" "))

  tkgrid(tklabel(ttmain4,text="Plotting Options",font=fontSubHeading),sticky="w")


  export.ord.plot.cb<- tkcheckbutton(ttmain4)
  export.ord.plot.cbValue<- tclVar("0")
  tkconfigure(export.ord.plot.cb,variable=export.ord.plot.cbValue)
  tkgrid(tklabel(ttmain4,text="Export Corresondance Analysis Plots?"),export.ord.plot.cb)

  export.tsa.plot.cb<- tkcheckbutton(ttmain4)
  export.tsa.plot.cbValue<- tclVar("0")
  tkconfigure(export.tsa.plot.cb,variable=export.tsa.plot.cbValue)
  tkgrid(tklabel(ttmain4,text="Export Test Site Analysis Plots?"),export.tsa.plot.cb)

  export.metric.plot.cb<- tkcheckbutton(ttmain4)
  export.metric.plot.cbValue<- tclVar("0")
  tkconfigure(export.metric.plot.cb,variable=export.metric.plot.cbValue)
  tkgrid(tklabel(ttmain4,text="Export Indicator Metric Box Plots?"),export.metric.plot.cb)

  multiplot.cb<- tkcheckbutton(ttmain4)
  multiplot.cbValue<- tclVar("1")
  tkconfigure(multiplot.cb,variable=multiplot.cbValue)
  tkgrid(tklabel(ttmain4,text="Export PDF Multi-Plots?"),multiplot.cb)

  plot.map.cb<- tkcheckbutton(ttmain4)
  plot.map.cbValue<- tclVar("0")
  tkconfigure(plot.map.cb,variable=plot.map.cbValue)
  tkgrid(tklabel(ttmain4,text="Export Maps?"),plot.map.cb, tkbutton(ttmain4,text="Map data folder", command = get.map.folder))

  tkgrid(tklabel(ttmain4,text=" "))
  tkgrid(tklabel(ttmain4,text=" "))

  tkgrid(tkbutton(ttmain4,text="Folder to Save Results", command = get.results.folder))
  if (Benthic.ss==T){
    tkgrid(tkbutton(ttmain4,text="Hilsenhoff Sensitivity Scores", command = get.HSI))
  }
  if (Fish.ss==T){
    tkgrid(tkbutton(ttmain4,text="Fish Feeding Guilds", command = get.fish.info))
  }

  to.full.run <- function () {
    if (as.character(tclvalue(export.ord.plot.cbValue))=="1"){
      export.ord.plot<<-T
    } else {
      export.ord.plot<<-F
    }
    if (as.character(tclvalue(export.tsa.plot.cbValue))=="1"){
      export.tsa.plot<<-T
    } else {
      export.tsa.plot<<-F
    }
    if (as.character(tclvalue(export.metric.plot.cbValue))=="1"){
      export.metric.plot<<-T
    } else {
      export.metric.plot<<-F
    }
    if (as.character(tclvalue(multiplot.cbValue))=="1"){
      multiplot<<-T
    } else {
      multiplot<<-F
    }
    if (as.character(tclvalue(plot.map.cbValue))=="1"){
      plot.map<<-T
    } else {
      plot.map<<-F
    }
    tkdestroy(ttmain4)
    #ttmain5 <- tktoplevel()
    #tkgrid(tklabel(ttmain5,text="Running...",font=fontHeading))
    #tkfocus(ttmain5)

    full.run()


  }

  tkgrid(tkbutton(ttmain4, text = "Begin Full Run", command=to.full.run))


  tkfocus(ttmain4)

}


full.run <- function () {
  transform=F
  corr.precip=F
  if (exclude.value==0|is.na(exclude.value)|is.nan(exclude.value)){
    exclude=F
  } else {
    exclude=T
  }

  figure.folder<-"Figures"
  results.folder<-"Results"
  dir.create(paste0(name.results.folder,"/",figure.folder), showWarnings = FALSE)
  dir.create(paste0(name.results.folder,"/",figure.folder,"/Ordination plots"), showWarnings = FALSE)
  dir.create(paste0(name.results.folder,"/",figure.folder,"/TSA plots"), showWarnings = FALSE)
  dir.create(paste0(name.results.folder,"/",figure.folder,"/Metric Differences"), showWarnings = FALSE)
  dir.create(paste0(name.results.folder,"/",figure.folder,"/Multiplots"), showWarnings = FALSE)
  dir.create(paste0(name.results.folder,"/",figure.folder,"/Maps"), showWarnings = FALSE)
  dir.create(paste0(name.results.folder,"/",results.folder), showWarnings = FALSE)

  if (plot.map==T) {
    suppressWarnings(library(rgdal))
    suppressWarnings(library(maptools))
    suppressWarnings(library(gridExtra))

    watersheds<-readOGR(dsn = paste0(map.folder), layer="Watershed_Areas_CH")
    streams<-readOGR(dsn = paste0(map.folder), layer="OHN watercourses - clipped")
    gis.stations<-read.csv(paste0(map.folder,"/Stations.csv"))
    rownames(gis.stations)<-gis.stations[,2]
    gis.stations<-gis.stations[,2:4]
    #w1<-(fortify(watersheds,region="Watershed"))
    #w2<-(fortify(streams,region="DESCR"))
    map<- ggplot() +
      geom_polygon(data=watersheds, aes(x=long,y=lat, group=group), color="grey30", fill="lemonchiffon2") +
      geom_path(data = streams,aes(x=long,y=lat, group=group), colour="blue", size = 0.25,alpha=0.5) + labs(x=NULL,y=NULL,title = "Conservation Halton") +
      theme(axis.title=element_text(size=15),panel.background=element_blank(),axis.ticks.y = element_blank(),axis.text.y = element_blank(),axis.ticks.x = element_blank(),axis.text.x = element_blank(),legend.position = "none")
  }
  ###################################################################################
  #Calculate summary Metrics
  #######################################################################################
  if (Benthic.ss==T) {
    summ<-data.frame(matrix(nrow=nrow(taxa),ncol=17))
    rownames(summ)<-rownames(taxa)
    colnames(summ)<-c("Richness","Simpson","Percent.Oligochaeta",
                      "Percent.Chironomidae","Percent.Isopoda","Percent.Amphipoda","Percent.EPT.Abundance",
                      "EPT.Richness","Ephemeroptera.Richness","Ephemeroptera.Abundance","Plecoptera.Richness","Plecoptera.Abundance","Trichoptera.Richness","Trichoptera.Abundance",
                      "No.EPT.per.NoEPT.and.Chir","Percent.Non.Chir.Dip","HBI")

    summ[,1]<-specnumber(taxa[,3:(n.taxa+2)])
    summ[,2]<-diversity(taxa[,3:(n.taxa+2)],index="simpson")
    #summ[,3]<-(apply(taxa[,3:(n.taxa+2)], 1, max))/rowSums((taxa[,3:(n.taxa+2)]))
    summ[,3]<-(taxa[,grep("Oligochaeta",colnames(taxa))])/rowSums((taxa[,3:(n.taxa+2)]))
    summ[,4]<-(taxa[,grep("Chironomidae",colnames(taxa))])/rowSums((taxa[,3:(n.taxa+2)]))
    summ[,5]<-rowSums(taxa[,grep("Isopoda",colnames(taxa))])/rowSums((taxa[,3:(n.taxa+2)]))
    summ[,6]<-rowSums(taxa[,grep("Amphipoda",colnames(taxa))])/rowSums((taxa[,3:(n.taxa+2)]))
    summ[,7]<-rowSums((taxa[,grep(paste0("Ephemeroptera|Plecoptera|Trichoptera"),colnames(taxa))]))/rowSums((taxa[,3:(n.taxa+2)]))
    summ[,8]<-rowSums((taxa.pa[,grep(paste0("Ephemeroptera|Plecoptera|Trichoptera"),colnames(taxa.pa))]))
    summ[,9]<-rowSums((taxa.pa[,grep("Ephemeroptera",colnames(taxa.pa))]))
    summ[,10]<-rowSums(taxa[,grep("Ephemeroptera",colnames(taxa))])/rowSums((taxa[,3:(n.taxa+2)]))
    summ[,11]<-rowSums((taxa.pa[,grep("Plecoptera",colnames(taxa.pa))]))
    summ[,12]<-rowSums(taxa[,grep("Plecoptera",colnames(taxa))])/rowSums((taxa[,3:(n.taxa+2)]))
    summ[,13]<-rowSums((taxa.pa[,grep("Trichoptera",colnames(taxa.pa))]))
    summ[,14]<-rowSums(taxa[,grep("Trichoptera",colnames(taxa))])/rowSums((taxa[,3:(n.taxa+2)]))
    summ[,15]<-(rowSums(taxa[,grep(paste0("Ephemeroptera|Plecoptera|Trichoptera"),colnames(taxa))]))/(rowSums(taxa[,grep(paste0("Ephemeroptera|Plecoptera|Trichoptera"),colnames(taxa))])+(taxa[,grep("Chironomidae",colnames(taxa))]))
    summ[,16]<-1-((taxa[,grep("Chironomidae",colnames(taxa))])/(rowSums((taxa[,grep(paste0("Diptera"),colnames(taxa))]))))

    HSI<-read.csv(benth.sp,header=T)
    HSI1<-HSI[,6]
    names(HSI1)<-HSI[,2]
    HSI2<-HSI1[!is.na(HSI1[grep(substr(paste0(HSI[,2],sep="|",collapse=""),1,(nchar(paste0(HSI[,2],sep="|",collapse=""))-1)),(colnames(taxa)[3:102]))])]
    #HIS1<-HSI1[-1]
    #HIS2<-HSI2[-1]
    temp1<-data.frame(matrix(,nrow=nrow(summ),ncol=(length(HSI1)+1)))
    rownames(temp1)<-rownames(summ)
    colnames(temp1)<-c(names(HSI1),"HSI")

    for(z1 in 1:nrow(summ)) {
      for (z2 in as.list(names(HSI1))) {
        if (!length(grep(paste0(z2),colnames(taxa)))) {
          temp1[z1,z2]<-0
        } else {
          temp1[z1,z2]<-(taxa[z1,grep(paste0(z2),colnames(taxa))]*HSI1[z2])
        }
      }
      temp1[z1,ncol(temp1)]<-rowSums(temp1[z1,c(1:(ncol(temp1)-1))])/sum(taxa[z1,3:102])

      summ[,17]<-temp1[,ncol(temp1)]


      #grep(substr(paste0(HSI[,2],sep="|",collapse=""),1,(nchar(paste0(HSI[,2],sep="|",collapse=""))-1)),(colnames(taxa)[3:103]))
      #taxa[,(grep(substr(paste0(HSI[,2],sep="|",collapse=""),1,(nchar(paste0(HSI[,2],sep="|",collapse=""))-1)),colnames(taxa)[3:103]))]
    }

    summ1<-as.matrix(summ)
    summ1[is.nan(summ1)]=0
    summ1[is.na(summ1)]=0
    summ<-data.frame(summ1)

    hg<-c("Richness","Simpson","Percent.EPT.Abundance",
          "EPT.Richness","Ephemeroptera.Richness","Ephemeroptera.Abundance","Plecoptera.Richness","Plecoptera.Abundance","Trichoptera.Richness",
          "No.EPT.per.NoEPT.and.Chir","Percent.Non.Chir.Dip")

    hb<-c("Percent.Oligochaeta",
          "Percent.Chironomidae","Percent.Isopoda","Percent.Amphipoda","HBI")

    lg<-c("Percent.Oligochaeta",
          "Percent.Chironomidae","Percent.Isopoda","Percent.Amphipoda","HBI")

    lb<-c("Richness","Simpson","Percent.EPT.Abundance",
          "EPT.Richness","Ephemeroptera.Richness","Ephemeroptera.Abundance","Plecoptera.Richness","Plecoptera.Abundance","Trichoptera.Richness",
          "No.EPT.per.NoEPT.and.Chir","Percent.Non.Chir.Dip")


    write.csv(summ,paste(name.results.folder,"/",results.folder,"/","Summary Statistics.csv",sep=""))
  }
  if (Fish.ss==T) {

    if (corr.precip==T) {
      precip1<-read.csv(precip,header=T)
      precip2<-merge(taxa,precip1,byx.x="Year",by.y="Year")[c(2,ncol(taxa):(ncol(taxa)+1))]
      rownames(precip2)<-make.unique(as.character(precip2[,"names"]))
      precip3<-precip2[,2]
      names(precip3)<-rownames(precip2)
    }

    fish.species<-read.csv(fish.sp,header=T,row.names=1)
    summ<-data.frame(matrix(nrow=nrow(taxa),ncol=18))
    rownames(summ)<-rownames(taxa)
    colnames(summ)<-c("Richness","Simpson","CPUE","BPUE",
                      "Percent.Omnivores","CPUE.Omnivores","BPUE.Omnivores",
                      "Percent.Coldwater","CPUE.Coldwater","BPUE.Coldwater",
                      "Percent.Rhinichthys","Percent.Creek.Chub",
                      "Percent.Warm.pred","CPUE.Warm.pred","BPUE.Warm.pred",
                      "Percent.Cold.pred","CPUE.Cold.pred","BPUE.Cold.pred")
    #"Percent.Invasives","Abundance.Darters.Sculpins","CPUE.Darters.Sculpins","BPUE.Darters.Sculpins",
    #"Abundance.Sucker.Catfish","CPUE.Sucker.Catfish","BPUE.Sucker.Catfish")

    #"Abundance.of.Darters.Sculpins","CPUE.Darters.Sculpins","BPUE.Darters.Sculpins",
    #"Abundance.of.Sunfish.Trout","CPUE.Sunfish.Trout","BPUE.Sunfish.Trout",
    #"Abundance.of Sucker.Catfish","CPUE.Sucker.Catfish","BPUE.Sucker.Catfish",
    #"Presence.of Brook.Trout",


    summ[,1]<-specnumber(taxa[,3:(n.taxa+2)])
    #summ[,2]<-diversity(taxa[,3:(n.taxa+2)],index="shannon")
    summ[,2]<-diversity(taxa[,3:(n.taxa+2)],index="simpson")
    #summ[,4]<-diversity(taxa[,3:(n.taxa+2)],index="invsimpson")
    #summ[,5]<-diversity(taxa[,3:(n.taxa+2)],index="shannon")/log(specnumber(taxa[,3:(n.taxa+2)]))
    #summ[,6]<-(apply(taxa[,3:(n.taxa+2)], 1, max))/rowSums((taxa[,3:(n.taxa+2)]))
    summ[,3]<-rowSums(taxa[,3:(n.taxa+2)])/effort
    summ[,4]<-rowSums(weights1[,3:(n.taxa+2)])/effort

    #summ[,5]<-rowSums(taxa[,grep(paste0("darter|sculpin"),colnames(taxa))])/rowSums(taxa[,3:(n.taxa+2)])
    #summ[,10]<-rowSums(taxa.pa[,grep(paste0("darter|sculpin"),colnames(taxa.pa))])/rowSums(taxa.pa[,1:(n.taxa)])
    #summ[,6]<-rowSums(taxa[,grep(paste0("darter|sculpin"),colnames(taxa))])/effort
    #summ[,7]<-rowSums(weights[,grep(paste0("darter|sculpin"),colnames(weights))])/effort

    #summ[,8]<-rowSums(taxa[,grep(paste0("trout|Sunfish|salmon|Pumpkinseed|Bluegill|crappie|bass|Lepomis"),colnames(taxa))])/rowSums(taxa[,3:(n.taxa+2)])
    #summ[,14]<-rowSums(taxa.pa[,grep(paste0("trout|sunfish|salmon|Pumpkinseed|Bluegill|crappie|bass|Lepomis"),colnames(taxa.pa))])/rowSums(taxa.pa[,1:(n.taxa)])
    #summ[,9]<-rowSums(taxa[,grep(paste0("trout|Sunfish|salmon|Pumpkinseed|Bluegill|crappie|bass|Lepomis"),colnames(taxa))])/effort
    #summ[,10]<-rowSums(weights[,grep(paste0("trout|Sunfish|salmon|Pumpkinseed|Bluegill|crappie|bass|Lepomis"),colnames(weights))])/effort

    #summ[,11]<-rowSums(taxa[,grep(paste0("sucker|Suckers|catfish|Catfishes|bullhead|Stonecat"),colnames(taxa))])/rowSums(taxa[,3:(n.taxa+2)])
    #summ[,18]<-rowSums(taxa.pa[,grep(paste0("sucker|catfish|bullhead|Stonecat"),colnames(taxa.pa))])/rowSums(taxa.pa[,1:(n.taxa)])
    #summ[,12]<-rowSums(taxa[,grep(paste0("sucker|catfish|bullhead|Stonecat"),colnames(taxa))])/effort
    #summ[,13]<-rowSums(weights[,grep(paste0("sucker|catfish|bullhead|Stonecat"),colnames(weights))])/effort

    #summ[,14]<-taxa.pa[,grep(paste0("Brook.trout"),colnames(taxa.pa))]
    summ[,5]<-rowSums(taxa[,subset(colnames(taxa), (colnames(taxa) %in% rownames(fish.species[fish.species$Trophic.Guild=="Omnivore"|fish.species$Trophic.Guild=="Insectivore/Omnivore"|fish.species$Trophic.Guild=="Omnivore/Herbivore",])))])/rowSums(taxa[,3:(n.taxa+2)]) # Is a generalist the same as an Omnivore?
    summ[,6]<-rowSums(taxa[,subset(colnames(taxa), (colnames(taxa) %in% rownames(fish.species[fish.species$Trophic.Guild=="Omnivore"|fish.species$Trophic.Guild=="Insectivore/Omnivore"|fish.species$Trophic.Guild=="Omnivore/Herbivore",])))])/effort
    summ[,7]<-rowSums(weights1[,subset(colnames(weights1), (colnames(weights1) %in% rownames(fish.species[fish.species$Trophic.Guild=="Omnivore"|fish.species$Trophic.Guild=="Insectivore/Omnivore"|fish.species$Trophic.Guild=="Omnivore/Herbivore",])))])/effort

    summ[,8]<-rowSums(taxa[,subset(colnames(taxa), (colnames(taxa) %in% rownames(fish.species[fish.species$Thermal.Regime=="cold",])))])/rowSums(taxa[,3:(n.taxa+2)])
    summ[,9]<-rowSums(taxa[,subset(colnames(taxa), (colnames(taxa) %in% rownames(fish.species[fish.species$Thermal.Regime=="cold",])))])/effort
    summ[,10]<-rowSums(weights1[,subset(colnames(weights1), (colnames(weights1) %in% rownames(fish.species[fish.species$Thermal.Regime=="cold",])))])/effort

    #summ[,28]<-rowSums(taxa[,subset(colnames(taxa), (colnames(taxa) %in% rownames(fish.species[fish.species$Trophic.Guild=="Insectivore",])))])/rowSums(taxa[,3:(n.taxa+2)])
    #summ[,29]<-rowSums(taxa[,subset(colnames(taxa), (colnames(taxa) %in% rownames(fish.species[fish.species$Trophic.Guild=="Insectivore",])))])/effort
    #summ[,30]<-rowSums(weights[,subset(colnames(weights), (colnames(weights) %in% rownames(fish.species[fish.species$Trophic.Guild=="Insectivore",])))])/effort

    summ[,11]<-rowSums(taxa[,grep(paste0("Blacknose.Dace|Longnose.Dace"),colnames(taxa))])/rowSums(taxa[,3:(n.taxa+2)])
    #summ[,32]<-(taxa[,"White.sucker"])/rowSums(taxa[,3:(n.taxa+2)])
    summ[,12]<-(taxa[,"Creek.Chub"])/rowSums(taxa[,3:(n.taxa+2)])
    #summ[,34]<-(taxa[,"Longnose.dace"])/rowSums(taxa[,3:(n.taxa+2)])

    summ[,13]<-rowSums(taxa[,grep(paste0("Bass|Pike|Sunfish|Sunfishes|Pumpkinseed|Bluegill|Crappie|Lepomis"),colnames(taxa))])/rowSums(taxa[,3:(n.taxa+2)])
    summ[,14]<-rowSums(taxa[,grep(paste0("Bass|Pike|Sunfish|Pumpkinseed|Bluegill|Crappie|Lepomis"),colnames(taxa))])/effort
    summ[,15]<-rowSums(weights1[,grep(paste0("Bass|Pike|Sunfish|Pumpkinseed|Bluegill|Crappie|Lepomis"),colnames(weights1))])/effort

    summ[,16]<-rowSums(taxa[,grep(paste0("Salmon|Trout"),colnames(taxa))])/rowSums(taxa[,3:(n.taxa+2)])
    summ[,17]<-rowSums(taxa[,grep(paste0("Salmon|Trout"),colnames(taxa))])/effort
    summ[,18]<-rowSums(weights1[,grep(paste0("Salmon|Trout"),colnames(weights1))])/effort

    #summ[,19]<-rowSums(taxa[,grep(paste0("Round.goby|Common.carp|Goldfish|Sea.lamprey"),colnames(taxa))])/rowSums(taxa[,3:(n.taxa+2)])

    #summ[,20]<-rowSums(taxa[,grep(paste0("darter|sculpin"),colnames(taxa))])/rowSums(taxa[,3:(n.taxa+2)])
    #summ[,21]<-rowSums(taxa[,grep(paste0("darter|sculpin"),colnames(taxa))])/effort
    #summ[,22]<-rowSums(weights[,grep(paste0("darter|sculpin"),colnames(weights))])/effort

    #summ[,23]<-rowSums(taxa[,grep(paste0("sucker|Suckers|catfish|Catfishes|bullhead|Stonecat"),colnames(taxa))])/rowSums(taxa[,3:(n.taxa+2)])
    #summ[,24]<-rowSums(taxa[,grep(paste0("sucker|catfish|bullhead|Stonecat"),colnames(taxa))])/effort
    #summ[,25]<-rowSums(weights[,grep(paste0("sucker|catfish|bullhead|Stonecat"),colnames(weights))])/effort


    summ1<-as.matrix(summ)
    summ1[is.nan(summ1)]=1
    summ1[is.na(summ1)]=0

    summ<-data.frame(summ1)

    heg<-c("CPUE","Percent.Coldwater","CPUE.Coldwater","BPUE.Coldwater",
           "Percent.Cold.pred","CPUE.Cold.pred","BPUE.Cold.pred")

    heb<-c("Percent.Omnivores","CPUE.Omnivores","BPUE.Omnivores",
           "Percent.Rhinichthys","Percent.Creek.Chub",
           "Percent.Warm.pred","CPUE.Warm.pred","BPUE.Warm.pred")
    #"Abundance.of.Darters.Sculpins","CPUE.Darters.Sculpins","BPUE.Darters.Sculpins",
    #"Abundance.Sucker.Catfish","CPUE.Sucker.Catfish","BPUE.Sucker.Catfish")

    hbg<-c("Richness","Simpson","CPUE","BPUE",
           "Percent.Coldwater","CPUE.Coldwater","BPUE.Coldwater",
           "Percent.Warm.pred","CPUE.Warm.pred","BPUE.Warm.pred","Percent.Cold.pred","CPUE.Cold.pred","BPUE.Cold.pred")
    #"Abundance.Darters.Sculpins","CPUE.Darters.Sculpins","BPUE.Darters.Sculpins",
    #"Abundance.Sucker.Catfish","CPUE.Sucker.Catfish","BPUE.Sucker.Catfish")

    hbb<-c("Percent.Rhinichthys","Percent.Creek.Chub","Percent.Omnivores","CPUE.Omnivores","BPUE.Omnivores")

    leg<-c("Percent.Omnivores","CPUE.Omnivores","BPUE.Omnivores",
           "Percent.Rhinichthys","Percent.Creek.Chub",
           "Percent.Warm.pred","CPUE.Warm.pred","BPUE.Warm.pred")
    #"Abundance.Darters.Sculpins","CPUE.Darters.Sculpins","BPUE.Darters.Sculpins",
    #"Abundance.Sucker.Catfish","CPUE.Sucker.Catfish","BPUE.Sucker.Catfish")

    leb<-c("CPUE","BPUE","Percent.Coldwater","CPUE.Coldwater","BPUE.Coldwater",
           "Percent.Cold.pred","CPUE.Cold.pred","BPUE.Cold.pred")

    lbg<-c("Percent.Omnivores","CPUE.Omnivores","BPUE.Omnivores",
           "Percent.Rhinichthys","Percent.Creek.Chub")

    lbb<-c("Richness","Simpson","CPUE","BPUE",
           #"Percent.Coldwater","CPUE.Coldwater","BPUE.Coldwater",
           "Percent.Warm.pred","CPUE.Warm.pred","BPUE.Warm.pred")#,"CPUE.Cold.pred","CPUE.Cold.pred","BPUE.Cold.pred")
    #"Abundance.Darters.Sculpins","CPUE.Darters.Sculpins","BPUE.Darters.Sculpins",
    #"Abundance.Sucker.Catfish","CPUE.Sucker.Catfish","BPUE.Sucker.Catfish")

    write.csv(summ,paste(name.results.folder,"/",results.folder,"/","Summary Statistics.csv",sep=""))
  }
  ###############################################################################
  #Import Correlation Variables
  ###############################################################################

  if(use.cor.var==T) {
    pred<-read.csv(name.cor.var,header=T,row.names=1)
    n.pred<-ncol(pred)
    pred1<-merge(taxa,pred,by.x="Site",by.y="row.names", all=F)
    pred1<-pred1[,(n.taxa+3):(n.taxa+(n.pred+3))]
    pred1<-pred1[!is.na(pred1$names) & !is.na(pred1[,2]),]
    rownames(pred1)<-make.unique(as.character(pred1$names))
    pred1<-pred1[sort(rownames(pred1)),]
    pred1<-pred1[,-c(1)]
    (rm(pred))
  }

  ##############################################################################
  #Nearest Neighbour Reference Site selection
  ##############################################################################
  if (override.ref.sel==F) {
    #Import data to be used to select nearest neighbour sites
    #Also includes whether sites are test or reference
    #Reference sites are labeled with 1 and test sites 0 in the reference.sites column
    v1<-read.csv(name.pred.var,header=T,row.names=1)
    #v1[,7]<-log(v1[,7],base=10)
    #Standardize variables
    v1<-v1[rownames(v1[rownames(v1)%in%taxa$Site,]),]
    n.v1<-ncol(v1)
    v2<-cbind(v1[,1:2],decostand(v1[,3:ncol(v1)],method="standardize"))
    colnames(v2)[1]<-"Reference.sites"
    colnames(v2)[2]<-"Escarpment"
    #Seperate Reference sites
    train.e<-v2[(v2$Reference.sites==1 & v2$Escarpment>0.5),c(3:ncol(v1))]
    l.e<-seq(1:nrow(train.e))
    train1.e<-cbind(train.e,l.e)

    train.b<-v2[(v2$Reference.sites==1 & v2$Escarpment<=0.5),c(3:ncol(v1))]
    l.b<-seq(1:nrow(train.b))
    train1.b<-cbind(train.b,l.b)

    #Seperate Test sites
    #test<-v2[v2$Reference.sites==0,c(2:ncol(v1))] # Use when using cutoff years
    test.e<-v2[v2$Escarpment>0.5,c(3:ncol(v1))]
    test.b<-v2[v2$Escarpment<=0.5,c(3:ncol(v1))]

    if (nn.method=="Euclidean") {
      #Get k nearest neighbour sites for each test site based on euchlidean distances
      tt1.e<-get.knnx(train.e, test.e, k=min(Y,nrow(train.e)), algorithm=c("brute"))
      tt1.b<-get.knnx(train.b, test.b, k=(Y), algorithm=c("brute"))
      #Seperate site names
      tt2.e<-data.frame(tt1.e$nn.index[,1:ncol(tt1.e$nn.index)])
      rownames(tt2.e)<-rownames(test.e)
      tt2.b<-data.frame(tt1.b$nn.index[,1:ncol(tt1.b$nn.index)])
      rownames(tt2.b)<-rownames(test.b)

      #Separate euchlidean distances between sites
      tt2.dist.e<-data.frame(tt1.e$nn.dist[,1:ncol(tt1.e$nn.dist)])
      tt2.dist.b<-data.frame(tt1.b$nn.dist[,1:ncol(tt1.b$nn.dist)])

      rownames(tt2.dist.e)<-rownames(test.e)
      rownames(tt2.dist.b)<-rownames(test.b)

      tt3.e<-data.frame(tt2.e)
      tt3.b<-data.frame(tt2.b)

      t2.e<-(matrix(ncol=ncol(tt2.e),nrow=nrow(tt2.e)))
      t2.b<-(matrix(ncol=ncol(tt2.b),nrow=nrow(tt2.b)))


      #temp1<-cascadeKM(v2[,2:9],4,7,iter = 1000, criterion="calinski")
      #temp2<-cascadeKM(v2[,2:9],4,7,iter = 1000, criterion="ssi")
      #temp3<-pamk(v2[,2:8], krange=5:7,criterion="asw",critout=T,scaling=F,usepam=T)

      if (site.selection==T) {
        #This loops through the nearest neighbour matrix and only keeps
        #the most similar sites that are below the "Fisher Break" point
        #of euchlidean distance
        for (n in 1:(nrow(tt2.dist.e))) {
          o<-classIntervals(as.matrix(tt2.dist.e[n,2:(ncol(tt2.dist.e))]),2,style="fisher")
          for (i in 2:ncol(tt2.dist.e)) {
            t2.e[n,1]<-tt3.e[n,1]
            if (tt2.dist.e[(n),i]<=o$brks[2]) {
              t2.e[(n),i]<-tt3.e[(n),i]
            }
            else {
              t2.e[n,i]<-NA
            }
          }
          rm(o,i)
        }
        rm(n)
        for (n in 1:(nrow(tt2.dist.b))) {
          o<-classIntervals(as.matrix(tt2.dist.b[n,2:(ncol(tt2.dist.b))]),2,style="fisher")
          for (i in 2:ncol(tt2.dist.b)) {
            t2.b[n,1]<-tt3.b[n,1]
            if (tt2.dist.b[(n),i]<=o$brks[2]) {
              t2.b[(n),i]<-tt3.b[(n),i]
            }
            else {
              t2.b[n,i]<-NA
            }
          }
          rm(o,i)
        }
        rm(n)

      } else {
        t2.b<-tt2.b
        t2.e<-tt2.e

      }

      #This loops through the nearest neighbour matrix
      #and reassigns site names
      rownames(t2.e)<-rownames(test.e)
      t2.e<-as.matrix(t2.e)
      for (n in 1:(nrow(t2.e)*ncol(t2.e))) {
        if (!is.na(t2.e[n])) {
          t2.e[n]<-rownames(train1.e[train1.e$l.e%in%t2.e[n],])
        }
        else {
          t2.e[n]<-NA
        }
        rm(n)
      }
      blank<-data.frame(matrix(NA,nrow=nrow(t2.e),ncol=(ncol(t2.b)-ncol(t2.e))))
      t2.e<-cbind(t2.e,blank)
      colnames(t2.e)<-c(1:ncol(t2.e))

      rownames(t2.b)<-rownames(test.b)
      t2.b<-as.matrix(t2.b)
      for (n in 1:(nrow(t2.b)*ncol(t2.b))) {
        if (!is.na(t2.b[n])) {
          t2.b[n]<-rownames(train1.b[train1.b$l.b%in%t2.b[n],])
        }
        else {
          t2.b[n]<-NA
        }
        rm(n)
      }
      colnames(t2.b)<-c(1:ncol(t2.b))

      t2<-rbind(t2.e,t2.b)

      t2<-data.frame(t2)
      t2<-t2[sort(rownames(t2)),]
      #In case there is a missmatch between sites in nearest neighbour matrix and bio matrix
      #This only keeps test sites in the nearest neighbour matrix if these is associated biological data
      t2<-t2[rownames(t2)%in%taxa$Site,]
      t3<-t(t2)
      rm(tt2.e,tt3.e,test.e,train.e,train1.e,tt1.e,l.e,tt2.b,tt3.b,test.b,train.b,train1.b,tt1.b,l.b)
    }

    if (nn.method=="ANNA") {
      test.merge<-v2[(v2$Reference.sites==0),c(2:ncol(v1))]
      train.merge<-v2[(v2$Reference.sites==1),c(2:ncol(v1))]

      t2.all<-data.frame(matrix(nrow=nrow(test.merge),ncol=Y))
      rownames(t2.all)<-rownames(test.merge)
      t2<-data.frame(matrix(nrow=nrow(test.merge),ncol=Y))
      rownames(t2)<-rownames(test.merge)

      tt2.dist.all<-data.frame(matrix(nrow=nrow(test.merge),ncol=Y))
      rownames(tt2.dist.all)<-rownames(test.merge)
      tt2.dist<-data.frame(matrix(nrow=nrow(test.merge),ncol=Y))
      rownames(tt2.dist)<-rownames(test.merge)


      #hab.data.test<-c("test.e","test.b")
      #hab.data.train<-c("train.e","test.b")
      for (e1 in 1:nrow(test.merge)) {
        if (!any(rownames(test.merge[e1,])==rownames(train.merge))) {
          ind.hab.data<-rbind(test.merge[e1,],train.merge)
        }

        if (any(rownames(test.merge[e1,])==rownames(train.merge))) {
          ind.hab.data<-rbind(test.merge[e1,],train.merge[which(rownames(test.merge[e1,])!=rownames(train.merge)),])
        }

        anna1<-rda(ind.hab.data[2:nrow(ind.hab.data),],scale=T)
        bstick1<-bstick(anna1)
        sig<-which(eigenvals(anna1)>bstick(anna1))
        pcval<-scores(anna1,choices=sig)$sites
        nn.ref<-sort(as.matrix(dist(pcval, method = "euclidean"))[1,],decreasing=F)
        t2.all[rownames(test.merge)[e1],]<-names(nn.ref)[1:Y]
        tt2.dist.all[rownames(test.merge)[e1],]<-nn.ref[1:Y]
      }

      if (site.selection==T) {
        for (n in 1:nrow(tt2.dist.all)) {
          o<-classIntervals(as.matrix(tt2.dist.all[n,3:(ncol(tt2.dist.all))]),2,style="fisher")

          for (i in 2:ncol(tt2.dist.all)) {
            t2[n,1]<-t2.all[n,1]
            if (tt2.dist.all[n,i]<=o$brks[2]) {
              t2[(n),i]<-t2.all[(n),i]
            }
            else {
              t2[n,i]<-NA
            }
          }
          rm(o,i)
        }
        rm(n)
        t2<-data.frame(t2)
        t2<-t2[sort(rownames(t2)),]
        tt2.dist<-tt2.dist.all
        #In case there is a missmatch between sites in nearest neighbour matrix and bio matrix
        #This only keeps test sites in the nearest neighbour matrix if these is associated biological data
        t2<-t2[rownames(t2)%in%taxa$Site,]
        t3<-t(t2)
      } else {
        t2<-data.frame(t2.all)
        t2<-t2[sort(rownames(t2)),]
        tt2.dist<-tt2.dist.all
        #In case there is a missmatch between sites in nearest neighbour matrix and bio matrix
        #This only keeps test sites in the nearest neighbour matrix if these is associated biological data
        t2<-t2[rownames(t2)%in%taxa$Site,]
        t3<-t(t2)
      }
    }
  }


  if (override.ref.sel==T) {
    v1<-data.frame(read.csv(name.pred.var,header=T,row.names=1))
    v3<-rownames(v1)[which(rownames(v1)%in%taxa$Site)]
    n.v1<-length(v3)
    v2<-v1[v3,]
    v2<-data.frame(v2)
    #v2<-cbind(v1[,1:2],decostand(v1[,3:ncol(v1)],method="standardize"))
    colnames(v2)[1]<-"Reference.sites"
    colnames(v2)[2]<-"Escarpment"

    ref<-read.csv(name.nn.sites,row.names=1)
    n.v1<-ncol(v1)
    t2<-data.frame(ref)
    t3<-t(t2)
  }
  ##########################################################################
  #Data Manupulation for analysis
  ##########################################################################
  #Seperate and log transform biological data if requested
  taxa.data<-taxa[rownames(taxa[taxa$Site%in%rownames(v2),]),]
  data2<-merge(taxa.data,v2,by.x="Site",by.y="row.names",all.y=F)
  data2<-data2[,-c((n.taxa+5):(n.taxa+(n.v1+4)))]
  colnames(data2)[max(ncol(data2))]<-"Refsites"
  rownames(data2)<-make.unique(as.character(data2$names))
  if (transform==T) {
    data2[,3:(n.taxa+2)]<-decostand((data2[,3:(n.taxa+2)]),method="log",logbase=log.base)
  }
  #If you want to exclude particular data use this line
  #I excluded data from before 2006 because there were inconsistencies in the collection methods
  if (exclude==T) {
    data<-data2[data2$Year!=exclude.value,]
  } else {
    data<-data2
  }

  #This section changes reference sites to test sites after a certain year

  if (!is.na(testing.year.cutoff)&testing.year.cutoff!=0){
    for (f in 1:nrow(data)) {
      if (data$Year[f]>=testing.year.cutoff) {
        data$Refsites[f]<-0
      }
    }
  }

  data.test1<-data[rownames(data[data$Refsites==0,]),]
  data.test<-data.test1[data.test1[,1] %in% rownames(t2),]

  suppressWarnings(rm(data2,v1,l.e,l.b,data.test1,f))

  results<-data.frame(matrix(nrow=nrow(data.test),ncol=ncol(summ)))
  colnames(results)<-colnames(summ)
  rownames(results)<-rownames(data.test)

  if (TSA==T) {
    tsa.results<-data.frame(matrix(nrow=nrow(data.test),ncol=15))
    rownames(tsa.results)<-rownames(data.test)
    colnames(tsa.results)<-c("Interval Test","Equivalence Test","TSA Impairment","Adjusted TSA Impairment","Metrics","Species","Number of Reference Samples","Test Site Distance","Lower Critical","Upper Critical","Highest Positive Correlation","Highest Negative Correlation","Warnings","Warnings2","Number of Metrics")
  }

  GIS.results<-data.frame(matrix(nrow=nrow(v2),ncol=length(unique(data.test$Year))))
  rownames(GIS.results)<-rownames(v2)
  colnames(GIS.results)<-sort(unique(data.test$Year))

  dist.results<-data.frame(matrix(nrow=nrow(v2),ncol=length(unique(data.test$Year))))
  rownames(dist.results)<-rownames(v2)
  colnames(dist.results)<-sort(unique(data.test$Year))

  ##############################################################################
  #Experimenting with modeling the effect of precipitation
  ##############################################################################
  if (corr.precip==T & Fish.ss==T) {
    #install.packages("glmmADMB", repos="http://r-forge.r-project.org", type="source")
    #library(glmmADMB)

    suppressWarnings(library(lme4))

    data.mod<-cbind(summ[rownames(precip2),],precip2[,3],precip2[,1])
    data.mod1<-data.mod[rownames(data),]
    data.mod1<-cbind(data.mod1,data$Year)
    colnames(data.mod1)[(ncol(data.mod1)-2):(ncol(data.mod1))]<-c("Precip","Station","Year")
    data.mod1[,ncol(data.mod1)]<-as.factor(data.mod1[,(ncol(data.mod1)-1)])
    data.mod1[,ncol(data.mod1)]<-as.integer(data.mod1[,(ncol(data.mod1))])
    sqrt.transf<-colnames(data.mod1)[c(1:13,15:24)]
    data.mod1$Precip<-scale(data.mod1$Precip)
    data.mod2<-data.mod1
    data.mod2[,sqrt.transf]<-sqrt(data.mod1[,sqrt.transf])

    summ.corr<-data.frame(matrix(nrow=nrow(data.mod1),ncol=(ncol(data.mod1)-3)))
    rownames(summ.corr)<-rownames(data.mod2)
    colnames(summ.corr)<-colnames(data.mod2)[1:(ncol(data.mod2)-3)]
    for (z1 in as.list(sqrt.transf)) {
      #regression <- paste0(z1,"~ - 1 + Precip+(1+Precip|Station)")
      regression <- paste0(z1,"~ -1 + (1+Precip|Station)")
      summ.corr[,z1]<-residuals(lmer(as.formula(regression),data=data.mod2,REML=T))#control=lmerControl(optimizer = "Nelder_Mead",optCtrl=list(maxfun=1e5))))
    }
    summ.corr[,c(14)]<-data.mod1[,c(14)]
    colnames(summ.corr)[c(14)]<-colnames(data.mod1)[c(14)]

    ##########################################################################################
    #Experimenting with different model fittings
    ##########################################################################################
    #CPUE~Precip+(1|Station)
    #CPUE~(1|Station) + Precip + (0+Precip|Station)
    #CPUE~(1+Precip|Station) + Station

    #mod0<-glm(BPUE~Precip,data=data.mod2,family="gaussian")
    #mod1<-glm(BPUE~Precip,data=data.mod2,family=Gamma(link="log"))
    #mod2<-lmer(BPUE~Precip+(1|Station),data=data.mod2,control=lmerControl(optimizer = "Nelder_Mead",optCtrl=list(maxfun=1e5)),REML=T)#subset(data.mod3,CPUE<0.5))
    #mod3<-lmer(BPUE~Precip+(1+Precip|Station),data=data.mod2,control=lmerControl(optimizer = "Nelder_Mead",optCtrl=list(maxfun=1e5)),REML=T)#subset(data.mod3,CPUE<0.5))
    #mod4<-glmer(BPUE~Precip+(1|Station),data=data.mod1,family="Gamma",control=glmerControl(optimizer = "Nelder_Mead",optCtrl=list(maxfun=1e5)))
    #mod5<-glmer(BPUE~Precip+(1+Precip|Station),nAGQ=0,data=data.mod1,family=Gamma(link=log),control=glmerControl(optimizer = "Nelder_Mead",optCtrl=list(maxfun=1e5)))
    #mod6<-glmer(BPUE~Precip+(1+Precip|Station),nAGQ=0,data=data.mod1,family=Gamma,control=glmerControl(optimizer = "Nelder_Mead",optCtrl=list(maxfun=1e5)))
    #mod6<-censReg(CPUE~Precip+(1+Precip|Station),data=data.mod3,left=0,right=Inf,)
    #mod1.1<-glmmadmb(Richness~Precip+(1+Precip|Station),data=data.mod1,zeroInflation=T, family="poisson")
    ##########################################################################################
  }
  ##############################################################################
  #
  ##############################################################################

  ###################################################################################
  #This loop is the main meat of the program. It loops through each test site
  #and performs the selected operations on it
  ##############################################################################
  b<-NULL
  for (j in which(!duplicated(data.test[,1]) | !duplicated(data.test[1:nrow(data.test),1])[1:nrow(data.test)])) {
    for (i in 1:length(data.test$Year[data.test[,1] %in% rownames(t2[paste0(data.test[j,1]),])])) {
      g2<-data.test[data.test[,1] %in% rownames(t2[paste0(data.test[j,1]),]),3:(n.taxa+2)][i,]
      g3<-data[data[,1] %in% t3[,paste0(data.test[j,1])],3:(n.taxa+4)]
      g4<-g3[rownames(g3) != rownames(g2),]
      g5<-g4[rownames(g4[g4$Refsites==1,]),1:(n.taxa)]
      g<-rbind(g5,g2)
      if (k > 0) {
        g1<-g[,colnames(g[,colSums(decostand(g,method="pa"))>ceiling(nrow(g)*k)])]
      }
      if (k==0) {
        g1<-g[,colnames(g[,colSums(g)>0])]
      }

      if (nrow(g1)<=6|rowSums(g1[nrow(g1),])==0) {
        next
      } else {

        test.site.name<-rownames(g1[max(nrow(g1)),])
        test.site.name.alone<-as.character(data.test[rownames(g1[max(nrow(g1)),]),"Site"])
        test.site.year.alone<-as.character(data.test[rownames(g1[max(nrow(g1)),]),"Year"])
        ref.sites<-row.names(g1)[1:(length(row.names(g1))-1)]

        b<-cca(g1)

        ###################################################################
        #Test Site Analysis
        ###################################################################
        if (TSA==T & (nrow(g1)>6)) {
          if (Fish.ss==T) {
            if (corr.precip==T) {
              if (summ[rownames(g1[nrow(g1),]),"BPUE"]==0) {
                restricted.metrics<-summ.corr[,-c(grep("BPUE",colnames(summ.corr)))]
              } else {
                restricted.metrics<-summ.corr[,]
              }
            }
            if (corr.precip==F) {
              if (any(summ[rownames(g1),"BPUE"]==0)) {
                restricted.metrics<-summ[,-c(grep("BPUE",colnames(summ)))]
              } else {
                restricted.metrics<-summ[,]
              }
            }

            tsa2<-cbind(restricted.metrics[rownames(g1),])#,scores(b,display="sites",choice=1:2))
            tsa3<-tsa2[1:(nrow(tsa2)),colSums(abs(tsa2))>0 & sapply(tsa2[1:(nrow(tsa2)-1),], sd)>0]
            tsa6<-data.frame(matrix(nrow=nrow(tsa3)))
            #This loops through each metric and removes metrics that have fewer than 20% unique variables
            for (p1 in 1:ncol(tsa3)) {
              if ((length(unique(tsa3[,p1])))>1){ #ceiling(nrow(tsa3)*0.1)
                tsa6[,paste0(colnames(tsa3)[p1])]<-tsa3[,p1]
                #colnames(tsa6)[ncol(tsa6)]<-colnames(tsa5)[p1]
              } else {
                next
              }
            }
            tsa6<-tsa6[,-c(1)]
            rownames(tsa6)<-rownames(g1)[1:(nrow(g1))]

            if (metric.select==T) {

              tsa.stand1<-data.frame(matrix(nrow=nrow(tsa6),ncol=ncol(tsa6)))
              rownames(tsa.stand1)<-rownames(tsa6)
              colnames(tsa.stand1)<-colnames(tsa6)
              for (n1 in 1:nrow(tsa6)) {
                for (n2 in 1:ncol(tsa6)) {
                  tsa.stand1[n1,n2]<-((tsa6[n1,n2]-mean(tsa6[1:(max(nrow(tsa6))-1),n2]))/sd(tsa6[1:(max(nrow(tsa6))-1),n2]))
                }
              }

              greater.than.ref<-colnames(tsa.stand1)[which((tsa.stand1[nrow(g1),]-colMeans(tsa.stand1[1:(nrow(g1)-1),]))>0)]
              less.than.ref<-colnames(tsa.stand1)[which((tsa.stand1[nrow(g1),]-colMeans(tsa.stand1[1:(nrow(g1)-1),]))<0)]
              if (v2[test.site.name.alone,2]>0.5) {
                indicative.metrics<-c(heb[which(heb%in%greater.than.ref)],leb[which(leb%in%less.than.ref)])
              }
              if (v2[test.site.name.alone,2]<=0.5) {
                indicative.metrics<-c(hbb[which(hbb%in%greater.than.ref)],lbb[which(lbb%in%less.than.ref)])
              }
              tsa.stand2<-tsa.stand1[,colnames(tsa.stand1)%in%indicative.metrics]

              if (length(indicative.metrics)>=4) {

                diff<-sort(abs(tsa.stand2[nrow(tsa.stand2),]),decreasing=T)
                test.var<-diff[1]
                cors<-(cor(tsa.stand2[1:(nrow(tsa.stand2)-1),],method="k")[,names(test.var)])+0.01
                cors<-cors[which(cors<0.8)]
                cors1<-cors[(names(diff))]
                cors1<-cors1[which(!is.na(cors1))]

                test.var[2]<-sort(abs(diff[names(cors1)]/cors1),decreasing=T)[1]
                #[which(names(sort(abs(diff/cor(tsa.stand2[1:(nrow(tsa.stand2)-1),],method="k")[,names(test.var)]),decreasing=T))%in%(names(cor(tsa.stand2[1:(nrow(tsa.stand2)-1),],method="k")[,names(test.var)])[which(cor(tsa.stand2[1:(nrow(tsa.stand2)-1),],method="k")[,names(test.var)]<0.7)]))][1]


                for (var in 1:(min((length(indicative.metrics)-2),ceiling(1/4*nrow(tsa.stand1))-2))) {
                  cors<-apply(abs(cor(tsa.stand2[1:(nrow(tsa.stand2)-1),],method="k")[,names(test.var)]+0.01),1,max)
                  if (any(cors<0.8)) {
                    cors<-cors[which(cors<0.8)]
                    cors1<-cors[(names(diff))]
                    cors1<-cors1[which(!is.na(cors1))]
                    test.var[var+2]<-sort(abs(diff[names(cors1)]/cors1),decreasing=T)[1]
                  } else {
                    break
                  }
                }

              } else {
                if (length(indicative.metrics)==0) {
                  test.var<-"CPUE"
                } else {
                  test.var<-indicative.metrics
                }
              }

              if (length(test.var)<4) {

                if ((length(test.var)==1)) {
                  tsa.stand2<-tsa.stand1[,colnames(tsa.stand1)%in%test.var]
                  test.var1<-data.frame(tsa.stand2[length(tsa.stand2)])
                  names(test.var1)<-test.var

                } else {
                  diff<-sort(abs(tsa.stand2[nrow(tsa.stand2),]),decreasing=T)
                  test.var1<-diff[1]
                  cors<-(cor(tsa.stand1[1:(nrow(tsa.stand1)-1),],method="k")[,names(test.var1)])+0.01
                  cors<-cors[which(cors<0.8)]
                  cors1<-cors[(names(diff))]
                  cors1<-cors1[which(!is.na(cors1))]
                }

                if (length(indicative.metrics)>=2) {
                  test.var1[2]<-sort(abs(diff[names(cors1)]/cors1),decreasing=T)[1]
                  #[which(names(sort(abs(diff/cor(tsa.stand2[1:(nrow(tsa.stand2)-1),],method="k")[,names(test.var)]),decreasing=T))%in%(names(cor(tsa.stand2[1:(nrow(tsa.stand2)-1),],method="k")[,names(test.var)])[which(cor(tsa.stand2[1:(nrow(tsa.stand2)-1),],method="k")[,names(test.var)]<0.7)]))][1]
                }

                if (length(indicative.metrics)>=3) {
                  for (var in 1:(min( if ((length(indicative.metrics)-2)<=0){1} else {(length(indicative.metrics)-2)},ceiling(1/4*nrow(tsa.stand1))-2))) {
                    cors<-apply(abs(cor(tsa.stand2[1:(nrow(tsa.stand2)-1),],method="k")[,names(test.var1)]+0.01),1,max)
                    if (any(cors<0.8)) {
                      cors<-cors[which(cors<0.8)]
                      cors1<-cors[(names(diff))]
                      cors1<-cors1[which(!is.na(cors1))]
                      test.var1[var+2]<-sort(abs(diff[names(cors1)]/cors1),decreasing=T)[1]
                    } else {
                      break
                    }
                  }
                }

                good.ind.met<-names(test.var1)

                extra.var<-c("CPUE","BPUE","Percent.Rhinichthys","Percent.Creek.Chub","Percent.Omnivore")
                test.var2<-c(good.ind.met,extra.var)
                if (any(duplicated(test.var2)==T)) {
                  extra.var2<-test.var2[which(duplicated(test.var2))]
                  extra.var1<-extra.var%w/o%extra.var2
                  extra.var1<-extra.var1[which(extra.var1%in%colnames(tsa.stand1))]
                  extra.var2<-c(extra.var1,good.ind.met)
                } else {
                  extra.var2<-c(good.ind.met,extra.var)
                  extra.var2<-extra.var2[which(extra.var2%in%colnames(tsa.stand1))]
                }

                tsa.stand3<-tsa.stand1[,colnames(tsa.stand1)%in%extra.var2]
                diff<-sort(abs(tsa.stand3[nrow(tsa.stand1),]),decreasing=T)

                #test.var2<-test.var2[which(duplicated(test.var2)==F)]

                for (var in 1:(max(3,ceiling(1/4*nrow(tsa.stand1))-2))) {
                  if ((length(test.var1)==1)) {
                    cors<-sort(abs(cor(tsa.stand3[1:(nrow(tsa.stand3)-1),extra.var2],method="k")[,names(test.var1)]+0.01),decreasing=T)
                  } else {
                    cors<-apply(abs(cor(tsa.stand3[1:(nrow(tsa.stand3)-1),extra.var2],method="k")[,names(test.var1)]+0.01),1,max)
                  }
                  if (any(cors<0.8)) {
                    cors<-cors[which(cors<0.8)]
                    cors1<-cors[(names(diff))]
                    cors1<-cors1[which(!is.na(cors1))]
                    test.var1[var+length(good.ind.met)]<-sort(abs(diff[names(cors1)]/cors1),decreasing=F)[1]
                  } else {
                    break
                  }
                }
                test.var<-test.var1
              }

              metric.auto<-names(test.var)
              tsa1<-tsa6[,metric.auto]

              suppressWarnings(rm(good.ind.met,indicative.metrics,cors,cors1,extra.var,test.var,extra.var2,extra.var1,good.ind.met,u1,u2,u3,tsa5,tsa6,cl1,cl2,metric.auto,tsa.stand,diff,test.var1))

            } else {
              if (summ[rownames(g1[nrow(g1),]),"BPUE"]==0) {
                tsa1<-(summ[rownames(g1),metric.choice[-c(grep("BPUE",metric.choice))]])
              } else {
                tsa1<-(summ[rownames(g1),metric.choice])
              }

              tsa.stand1<-data.frame(matrix(nrow=nrow(tsa6),ncol=ncol(tsa6)))
              rownames(tsa.stand1)<-rownames(tsa6)
              colnames(tsa.stand1)<-colnames(tsa6)
              for (n1 in 1:nrow(tsa6)) {
                for (n2 in 1:ncol(tsa6)) {
                  tsa.stand1[n1,n2]<-((tsa6[n1,n2]-mean(tsa6[1:(max(nrow(tsa6))-1),n2]))/sd(tsa6[1:(max(nrow(tsa6))-1),n2]))
                }
              }

            }
          }
          #tsa1<-cbind(summ[rownames(g1),c(8,10,12)],scores(b,display="sites",choice=1:2))
          #}
          if (Benthic.ss==T) {

            restricted.metrics<-summ[rownames(g1),1:ncol(summ)]

            tsa2<-cbind(restricted.metrics[rownames(g1),])#,scores(b,display="sites",choice=1:2))
            tsa3<-tsa2[1:(nrow(tsa2)),colSums(abs(tsa2))>0 & sapply(tsa2[1:(nrow(tsa2)-1),], sd)>0]
            tsa6<-data.frame(matrix(nrow=nrow(tsa3)))
            #This loops through each metric and removes metrics that have fewer than 20% unique variables
            for (p1 in 1:ncol(tsa3)) {
              if ((length(unique(tsa3[,p1])))>1){ #ceiling(nrow(tsa3)*0.1)
                if (length(duplicated(tsa3[,p1]))>((1/4)*nrow(tsa3))) {
                  tsa6[,paste0(colnames(tsa3)[p1])]<-tsa3[,p1]
                } else {
                  next
                }
                #colnames(tsa6)[ncol(tsa6)]<-colnames(tsa5)[p1]
              } else {
                next
              }
            }
            tsa6<-tsa6[,-c(1)]
            rownames(tsa6)<-rownames(g1)[1:(nrow(g1))]

            if (metric.select==T) {
              tsa.stand1<-data.frame(matrix(nrow=nrow(tsa6),ncol=ncol(tsa6)))
              rownames(tsa.stand1)<-rownames(tsa6)
              colnames(tsa.stand1)<-colnames(tsa6)
              for (n1 in 1:nrow(tsa6)) {
                for (n2 in 1:ncol(tsa6)) {
                  tsa.stand1[n1,n2]<-((tsa6[n1,n2]-mean(tsa6[1:(max(nrow(tsa6))-1),n2]))/sd(tsa6[1:(max(nrow(tsa6))-1),n2]))
                }
              }

              greater.than.ref<-colnames(tsa.stand1)[which((tsa.stand1[nrow(g1),]-colMeans(tsa.stand1[1:(nrow(g1)-1),]))>0)]
              less.than.ref<-colnames(tsa.stand1)[which((tsa.stand1[nrow(g1),]-colMeans(tsa.stand1[1:(nrow(g1)-1),]))<0)]
              indicative.metrics<-c(hb[which(hb%in%greater.than.ref)],lb[which(lb%in%less.than.ref)])
              tsa.stand2<-tsa.stand1[,colnames(tsa.stand1)%in%indicative.metrics]

              if (length(indicative.metrics)>=4) {

                diff<-sort(abs(tsa.stand2[nrow(tsa.stand2),]),decreasing=T)
                test.var<-diff[1]
                cors<-(cor(tsa.stand2[1:(nrow(tsa.stand2)-1),],method="k")[,names(test.var)])+0.01
                cors<-cors[which(cors<0.8)]
                cors1<-cors[(names(diff))]
                cors1<-cors1[which(!is.na(cors1))]

                test.var[2]<-sort(abs(diff[names(cors1)]/cors1),decreasing=T)[1]
                #[which(names(sort(abs(diff/cor(tsa.stand2[1:(nrow(tsa.stand2)-1),],method="k")[,names(test.var)]),decreasing=T))%in%(names(cor(tsa.stand2[1:(nrow(tsa.stand2)-1),],method="k")[,names(test.var)])[which(cor(tsa.stand2[1:(nrow(tsa.stand2)-1),],method="k")[,names(test.var)]<0.7)]))][1]


                for (var in 1:(min((length(indicative.metrics)-2),ceiling(1/4*nrow(tsa.stand1))-2))) {
                  cors<-apply(abs(cor(tsa.stand2[1:(nrow(tsa.stand2)-1),],method="k")[,names(test.var)]+0.01),1,max)
                  if (any(cors<0.8)) {
                    cors<-cors[which(cors<0.8)]
                    cors1<-cors[(names(diff))]
                    cors1<-cors1[which(!is.na(cors1))]
                    test.var[var+2]<-sort(abs(diff[names(cors1)]/cors1),decreasing=T)[1]
                  } else {
                    break
                  }
                }

              } else {
                if (length(indicative.metrics)==0) {
                  test.var<-"CPUE"
                } else {
                  test.var<-indicative.metrics
                }
              }

              if (length(test.var)<4) {

                if ((length(test.var)==1)) {
                  tsa.stand2<-tsa.stand1[,colnames(tsa.stand1)%in%test.var]
                  test.var1<-data.frame(tsa.stand2[length(tsa.stand2)])
                  names(test.var1)<-test.var

                } else {
                  diff<-sort(abs(tsa.stand2[nrow(tsa.stand2),]),decreasing=T)
                  test.var1<-diff[1]
                  cors<-(cor(tsa.stand1[1:(nrow(tsa.stand1)-1),],method="k")[,names(test.var1)])+0.01
                  cors<-cors[which(cors<0.8)]
                  cors1<-cors[(names(diff))]
                  cors1<-cors1[which(!is.na(cors1))]
                }

                if (length(indicative.metrics)>=2) {
                  test.var1[2]<-sort(abs(diff[names(cors1)]/cors1),decreasing=T)[1]
                  #[which(names(sort(abs(diff/cor(tsa.stand2[1:(nrow(tsa.stand2)-1),],method="k")[,names(test.var)]),decreasing=T))%in%(names(cor(tsa.stand2[1:(nrow(tsa.stand2)-1),],method="k")[,names(test.var)])[which(cor(tsa.stand2[1:(nrow(tsa.stand2)-1),],method="k")[,names(test.var)]<0.7)]))][1]
                }

                if (length(indicative.metrics)>=3) {
                  for (var in 1:(min( if ((length(indicative.metrics)-2)<=0){1} else {(length(indicative.metrics)-2)},ceiling(1/4*nrow(tsa.stand1))-2))) {
                    cors<-apply(abs(cor(tsa.stand2[1:(nrow(tsa.stand2)-1),],method="k")[,names(test.var1)]+0.01),1,max)
                    if (any(cors<0.8)) {
                      cors<-cors[which(cors<0.8)]
                      cors1<-cors[(names(diff))]
                      cors1<-cors1[which(!is.na(cors1))]
                      test.var1[var+2]<-sort(abs(diff[names(cors1)]/cors1),decreasing=T)[1]
                    } else {
                      break
                    }
                  }
                }

                good.ind.met<-names(test.var1)

                extra.var<-c("Richness","Percent.EPT.Abundance","Percent.Oligochaeta","Percent.Chironomidae","Percent.Isopoda","HBI")
                test.var2<-c(good.ind.met,extra.var)
                if (any(duplicated(test.var2)==T)) {
                  extra.var2<-test.var2[which(duplicated(test.var2))]
                  extra.var1<-extra.var[which(extra.var!=extra.var2)]
                  extra.var1<-extra.var1[which(extra.var1%in%colnames(tsa.stand1))]
                  extra.var2<-c(extra.var1,good.ind.met)
                } else {
                  extra.var2<-c(good.ind.met,extra.var)
                  extra.var2<-extra.var2[which(extra.var2%in%colnames(tsa.stand1))]
                }

                tsa.stand3<-tsa.stand1[,colnames(tsa.stand1)%in%extra.var2]
                diff<-sort(abs(tsa.stand3[nrow(tsa.stand1),]),decreasing=T)

                #test.var2<-test.var2[which(duplicated(test.var2)==F)]

                for (var in 1:(max(3,ceiling(1/4*nrow(tsa.stand1))-2))) {
                  if ((length(test.var1)==1)) {
                    cors<-sort(abs(cor(tsa.stand3[1:(nrow(tsa.stand3)-1),extra.var2],method="k")[,names(test.var1)]+0.01),decreasing=T)
                  } else {
                    cors<-apply(abs(cor(tsa.stand3[1:(nrow(tsa.stand3)-1),extra.var2],method="k")[,names(test.var1)]+0.01),1,max)
                  }
                  if (any(cors<0.8)) {
                    cors<-cors[which(cors<0.8)]
                    cors1<-cors[(names(diff))]
                    cors1<-cors1[which(!is.na(cors1))]
                    test.var1[var+length(good.ind.met)]<-sort(abs(diff[names(cors1)]/cors1),decreasing=F)[1]
                  } else {
                    break
                  }
                }
                test.var<-test.var1
              }

              metric.auto<-names(test.var)
              tsa1<-tsa6[,metric.auto]

              suppressWarnings(rm(good.ind.met,indicative.metrics,cors,cors1,extra.var,test.var,extra.var2,extra.var1,good.ind.met,u1,u2,u3,tsa5,tsa6,cl1,cl2,metric.auto,tsa.stand,diff,test.var1))
            } else {
              tsa1<-(summ[rownames(g1),metric.choice])

              tsa.stand1<-data.frame(matrix(nrow=nrow(tsa6),ncol=ncol(tsa6)))
              rownames(tsa.stand1)<-rownames(tsa6)
              colnames(tsa.stand1)<-colnames(tsa6)
              for (n1 in 1:nrow(tsa6)) {
                for (n2 in 1:ncol(tsa6)) {
                  tsa.stand1[n1,n2]<-((tsa6[n1,n2]-mean(tsa6[1:(max(nrow(tsa6))-1),n2]))/sd(tsa6[1:(max(nrow(tsa6))-1),n2]))
                }
              }
            }
          }

          ##########################################################################
          # TSA Block
          ###########################################################################

          tsa.stand<-data.frame(matrix(nrow=nrow(tsa1),ncol=ncol(tsa1)))
          rownames(tsa.stand)<-rownames(tsa1)
          colnames(tsa.stand)<-colnames(tsa1)
          for (n1 in 1:nrow(tsa1)) {
            for (n2 in 1:ncol(tsa1)) {
              tsa.stand[n1,n2]<-((tsa1[n1,n2]-mean(tsa1[1:(max(nrow(tsa1))-1),n2]))/sd(tsa1[1:(max(nrow(tsa1))-1),n2]))
            }
          }

          if (FALSE){
            for (l1 in 1:length(which(tsa.stand[nrow(tsa.stand),]>8))) {
              tsa.stand[nrow(tsa.stand),which(tsa.stand[nrow(tsa.stand),]>8)]<-8
            }

            for (l1 in 1:length(which(tsa.stand[nrow(tsa.stand),]<-8))) {
              tsa.stand[nrow(tsa.stand),which(tsa.stand[nrow(tsa.stand),]>8)]<-(-8)
            }
          }

          #This loop looks for whether the data matrix is singular.
          #If it is it removes the last included metric and tries again
          for (cc1 in 1:ncol(tsa.stand)) {
            tsa.ref.cent<-colMeans(tsa.stand[1:(nrow(tsa.stand)-1),])
            tsa.cov<-(cov((tsa.stand[1:(nrow(tsa.stand)-1),])))#ginv
            cc <- try(mahalanobis(tsa.stand,tsa.ref.cent,tsa.cov,inverted=F), silent=T)
            if(is(cc,"try-error")) {
              tsa.stand<-tsa.stand[,1:(ncol(tsa.stand)-1)]
            } else {break}
          }

          suppressWarnings(rm(cc1,cc))

          tsa.dist<-data.frame(matrix(nrow=nrow(tsa1),ncol=1))
          rownames(tsa.dist)<-rownames(tsa1)
          colnames(tsa.dist)<-("Distance")

          for (n1 in 1:nrow(tsa.stand)) {
            tsa.dist[n1,]<-mahalanobis(tsa.stand[n1,],tsa.ref.cent,tsa.cov,inverted=F)
          }

          nRef<-nrow(tsa.stand)-1
          nInd<-ncol(tsa.stand)-1

          tsa.lambda<-qchisq(0.05,nInd, ncp = 0, lower.tail = FALSE, log.p = FALSE)*nRef
          tsa.F<-((nRef-nInd)*nRef*tsa.dist[nrow(tsa.dist),])/(nInd*(nRef-1))
          #qf((0.05), nInd, (nRef-nInd), tsa.lambda, log=FALSE)
          tsa.NCPinterval<-1-pf(tsa.F, nInd, (nRef-nInd), tsa.lambda, log=FALSE)
          tsa.NCPequivalence<-1-tsa.NCPinterval

          tsa.results[row.names(g1[max(nrow(g1)),]),]<-c(tsa.NCPinterval,tsa.NCPequivalence,"NA","NA","NA","NA",(max(nrow(tsa1))-1),tsa.dist[max(nrow(tsa1)),],((nInd*(nRef-1))*qf(0.05, df1=nInd, df2=(nRef-nInd), ncp=tsa.lambda, log=FALSE))/((nRef-nInd)*nRef),((nInd*(nRef-1))*qf(0.95, df1=nInd, df2=(nRef-nInd), ncp=tsa.lambda, log=FALSE))/((nRef-nInd)*nRef),"NA","NA","NA","NA","NA")

          if (Fish.ss==T & sum(taxa[test.site.name,3:(n.taxa+2)])<5) {
            tsa.results[test.site.name,13]<-"Fewer than 5 Fish Caught - Results may be suspect"
          }

          if (Fish.ss==T & sum(taxa.pa[test.site.name,1:n.taxa])<3) {
            tsa.results[test.site.name,14]<-"Fewer than 3 Species Caught - Results may be suspect"
          }
          tsa.results[test.site.name,15]<-ncol(tsa.stand)

          dist.results[paste0(data.test[row.names(g1[max(nrow(g1)),]),"Site"]),paste0(data.test[row.names(g1[max(nrow(g1)),]),"Year"])]<-tsa.dist[nrow(tsa.dist),]/ncol(tsa.stand)

          part.tsa<-data.frame(matrix(nrow=ncol(tsa.stand),ncol=2))
          rownames(part.tsa)<-colnames(tsa.stand)
          colnames(part.tsa)<-c("p","F")

          for (n2 in 1:ncol(tsa.stand)) {
            part.tsa.stand<-tsa.stand[,-c(n2)]
            part.tsa.cov<-(cov((tsa.stand[1:(nrow(tsa.stand)-1),-c(n2)])))
            part.tsa.ref.cent<-colMeans(tsa.stand[1:(nrow(tsa.stand)-1),-c(n2)])

            part.tsa.dist<-mahalanobis(part.tsa.stand[nrow(part.tsa.stand),],part.tsa.ref.cent,part.tsa.cov,inverted=F)
            part.tsa.F<-(nRef - nInd)*(tsa.dist[nrow(part.tsa.stand),] - part.tsa.dist)/((nRef - 1) + part.tsa.dist)
            part.tsa.NCPinterval<-1-pf(part.tsa.F, 1, (nRef-nInd))
            part.tsa[n2,]<-c(part.tsa.NCPinterval,part.tsa.F)
          }

          plot1<-capscale(distance(tsa.stand,method="mahalanobis")~1,comm=g1,data=tsa.stand,add=F,sqrt.dist=F,dfun=distance)
          plot2<-capscale(tsa.stand~1,comm=g1,data=tsa.stand,add=F,sqrt.dist=F,distance="mahalanobis",dfun=distance)

          p2<-scores(plot1,display="sites",choice=1:2)
          p4<-colMeans(p2[1:max(nrow(p2))-1,])
          p3<-p2[max(nrow(p2)),]
          y2<-scores(b,display="sites",choice=1:2)
          y3<-y2[max(nrow(y2)),]
          k2<-(scores(b,display="species",choice=1:2))
          k3<-(abs((y3[1]-k2[,1])*(((b$CA$eig)[1])/sum(b$CA$eig))))+(abs((y3[2]-k2[,2])*(((b$CA$eig)[2])/sum(b$CA$eig))))
          l2<-(scores(plot2,display="species",choice=1:2))
          l3<-(abs((p3[1]-l2[,1])*(((plot2$CA$eig)[1])/sum(plot2$CA$eig))))+(abs((p3[2]-l2[,2])*(((plot2$CA$eig)[2])/sum(plot2$CA$eig))))

          if (tsa.NCPinterval<=0.05) {
            tsa.results[row.names(g1[max(nrow(g1)),]),3]<-"Poor"
            tsa.results[row.names(g1[max(nrow(g1)),]),4]<-"Poor"
            GIS.results[paste0(data.test[row.names(g1[max(nrow(g1)),]),"Site"]),paste0(data.test[row.names(g1[max(nrow(g1)),]),"Year"])]<-1
            l4<-sort(l3[l3<(min(l3)+((max(l3)-min(l3))*0.1))])
            tsa.results[row.names(g1[max(nrow(g1)),]),5]<-paste(unlist(rownames(part.tsa)[which(part.tsa$p<0.05)]),collapse = ", ")
            k4<-sort(k3[k3<(min(k3)+((max(k3)-min(l3))*0.1))])
            tsa.results[row.names(g1[max(nrow(g1)),]),6]<-paste(unlist(names(k4)),collapse = ", ")
            if (any(part.tsa$p<0.05)) {
              k2<-rownames(part.tsa)[which(part.tsa$p<0.05)]
              temp.imp<-rep(NA,(length(which(part.tsa$p<0.05))))
              text.t<-NA
              for (k1 in 1:length(k2)) {
                if (Fish.ss==T & v2[test.site.name.alone,"Escarpment"]>0.5) {
                  if (((k2[k1]%in%heg) & tsa.stand[nrow(tsa.stand),k2[k1]]>tsa.ref.cent[k2[k1]]) | ((k2[k1]%in%leg) & tsa.stand[nrow(tsa.stand),k2[k1]]<tsa.ref.cent[k2[k1]])) {
                    temp.imp[k1]<-as.numeric(1)
                    text.t[k1]<-k2[k1]
                  }
                  if (((k2[k1]%in%leb) & tsa.stand[nrow(tsa.stand),k2[k1]]<tsa.ref.cent[k2[k1]]) | ((k2[k1]%in%heb) & tsa.stand[nrow(tsa.stand),k2[k1]]>tsa.ref.cent[k2[k1]])) {
                    temp.imp[k1]<-as.numeric(-1)
                  }
                }
                if (Fish.ss==T & v2[test.site.name.alone,"Escarpment"]<=0.5) {
                  if (((k2[k1]%in%hbg) & tsa.stand[nrow(tsa.stand),k2[k1]]>tsa.ref.cent[k2[k1]]) | ((k2[k1]%in%lbg) & tsa.stand[nrow(tsa.stand),k2[k1]]<tsa.ref.cent[k2[k1]])) {
                    temp.imp[k1]<-as.numeric(1)
                    text.t[k1]<-k2[k1]
                  }
                  if (((k2[k1]%in%lbb) & tsa.stand[nrow(tsa.stand),k2[k1]]<tsa.ref.cent[k2[k1]]) | ((k2[k1]%in%hbb) & tsa.stand[nrow(tsa.stand),k2[k1]]>tsa.ref.cent[k2[k1]])) {
                    temp.imp[k1]<-as.numeric(-1)
                  }
                }

                if (Benthic.ss==T) {
                  if (((k2[k1]%in%hg) & tsa.stand[nrow(tsa.stand),k2[k1]]>tsa.ref.cent[k2[k1]]) | ((k2[k1]%in%lg) & tsa.stand[nrow(tsa.stand),k2[k1]]<tsa.ref.cent[k2[k1]])) {
                    temp.imp[k1]<-as.numeric(1)
                    text.t[k1]<-k2[k1]
                  }
                  if (((k2[k1]%in%lb) & tsa.stand[nrow(tsa.stand),k2[k1]]<tsa.ref.cent[k2[k1]])| ((k2[k1]%in%hb) & tsa.stand[nrow(tsa.stand),k2[k1]]>tsa.ref.cent[k2[k1]])) {
                    temp.imp[k1]<-as.numeric(-1)
                  }
                }
              }
              temp.imp[is.na(temp.imp)]<-0
              if (sum(as.numeric(temp.imp))>0) {
                tsa.results[row.names(g1[max(nrow(g1)),]),4]<-"Fair"
                GIS.results[paste0(data.test[row.names(g1[max(nrow(g1)),]),"Site"]),paste0(data.test[row.names(g1[max(nrow(g1)),]),"Year"])]<-2
              } else {
                tsa.results[row.names(g1[max(nrow(g1)),]),4]<-"Poor"
                GIS.results[paste0(data.test[row.names(g1[max(nrow(g1)),]),"Site"]),paste0(data.test[row.names(g1[max(nrow(g1)),]),"Year"])]<-1
              }
            } else {
              tsa.results[row.names(g1[max(nrow(g1)),]),4]<-"Poor"
              GIS.results[paste0(data.test[row.names(g1[max(nrow(g1)),]),"Site"]),paste0(data.test[row.names(g1[max(nrow(g1)),]),"Year"])]<-1
            }
          } else if (tsa.NCPinterval>=0.95){
            tsa.results[row.names(g1[max(nrow(g1)),]),3]<-"Good"
            tsa.results[row.names(g1[max(nrow(g1)),]),4]<-"Good"
            GIS.results[paste0(data.test[row.names(g1[max(nrow(g1)),]),"Site"]),paste0(data.test[row.names(g1[max(nrow(g1)),]),"Year"])]<-3
          } else {
            tsa.results[row.names(g1[max(nrow(g1)),]),3]<-"Fair"
            GIS.results[paste0(data.test[row.names(g1[max(nrow(g1)),]),"Site"]),paste0(data.test[row.names(g1[max(nrow(g1)),]),"Year"])]<-2
            l4<-sort(l3[l3<(min(l3)+((max(l3)-min(l3))*0.1))])
            tsa.results[row.names(g1[max(nrow(g1)),]),5]<-paste(unlist(rownames(part.tsa)[which(part.tsa$p<0.05)]),collapse = ", ")
            k4<-sort(k3[k3<(min(k3)+((max(k3)-min(l3))*0.1))])
            tsa.results[row.names(g1[max(nrow(g1)),]),6]<-paste(unlist(names(k4)),collapse = ", ")
            if (FALSE) { #(any(part.tsa$p<0.05)) {
              k2<-rownames(part.tsa)[which(part.tsa$p<0.05)]
              temp.imp<-rep(NA,(length(which(part.tsa$p<0.05))))
              text.t<-NA
              for (k1 in 1:length(k2)) {
                if (Fish.ss==T & v2[test.site.name.alone,"Escarpment"]>0.5) {
                  if (((k2[k1]%in%heg) & tsa.stand[nrow(tsa.stand),k2[k1]]>tsa.ref.cent[k2[k1]]) | ((k2[k1]%in%leg) & tsa.stand[nrow(tsa.stand),k2[k1]]<tsa.ref.cent[k2[k1]])) {
                    temp.imp[k1]<-as.numeric(1)
                    text.t[k1]<-k2[k1]
                  }
                  if (((k2[k1]%in%leb) & tsa.stand[nrow(tsa.stand),k2[k1]]<tsa.ref.cent[k2[k1]]) | ((k2[k1]%in%heb) & tsa.stand[nrow(tsa.stand),k2[k1]]>tsa.ref.cent[k2[k1]])) {
                    temp.imp[k1]<-as.numeric(-1)
                  }
                }
                if (Fish.ss==T & v2[test.site.name.alone,"Escarpment"]<=0.5) {
                  if (((k2[k1]%in%hbg) & tsa.stand[nrow(tsa.stand),k2[k1]]>tsa.ref.cent[k2[k1]]) | ((k2[k1]%in%lbg) & tsa.stand[nrow(tsa.stand),k2[k1]]<tsa.ref.cent[k2[k1]])) {
                    temp.imp[k1]<-as.numeric(1)
                    text.t[k1]<-k2[k1]
                  }
                  if (((k2[k1]%in%lbb) & tsa.stand[nrow(tsa.stand),k2[k1]]<tsa.ref.cent[k2[k1]]) | ((k2[k1]%in%hbb) & tsa.stand[nrow(tsa.stand),k2[k1]]>tsa.ref.cent[k2[k1]])) {
                    temp.imp[k1]<-as.numeric(-1)
                  }
                }

                if (Benthic.ss==T) {
                  if (((k2[k1]%in%hg) & tsa.stand[nrow(tsa.stand),k2[k1]]>tsa.ref.cent[k2[k1]]) | ((k2[k1]%in%lg) & tsa.stand[nrow(tsa.stand),k2[k1]]<tsa.ref.cent[k2[k1]])) {
                    temp.imp[k1]<-as.numeric(1)
                    text.t[k1]<-k2[k1]
                  }
                  if (((k2[k1]%in%lb) & tsa.stand[nrow(tsa.stand),k2[k1]]<tsa.ref.cent[k2[k1]])| ((k2[k1]%in%hb) & tsa.stand[nrow(tsa.stand),k2[k1]]>tsa.ref.cent[k2[k1]])) {
                    temp.imp[k1]<-as.numeric(-1)
                  }
                }
              }
              temp.imp[is.na(temp.imp)]<-0

              if (sum(as.numeric(temp.imp))>0) {
                tsa.results[row.names(g1[max(nrow(g1)),]),4]<-"Good"
                GIS.results[paste0(data.test[row.names(g1[max(nrow(g1)),]),"Site"]),paste0(data.test[row.names(g1[max(nrow(g1)),]),"Year"])]<-3
              } else {
                tsa.results[row.names(g1[max(nrow(g1)),]),4]<-"Fair"
                GIS.results[paste0(data.test[row.names(g1[max(nrow(g1)),]),"Site"]),paste0(data.test[row.names(g1[max(nrow(g1)),]),"Year"])]<-2
              }
            } else {
              tsa.results[row.names(g1[max(nrow(g1)),]),4]<-"Fair"
              GIS.results[paste0(data.test[row.names(g1[max(nrow(g1)),]),"Site"]),paste0(data.test[row.names(g1[max(nrow(g1)),]),"Year"])]<-2
            }
          }

          if (use.cor.var==T){
            if (! any(is.na(match(rownames(g1),rownames(pred1))))){
              d1<-(pred1[row.names(g1),])
              suppressWarnings(env<-envfit(plot1,d1[,colSums(d1)>0],display="sites",na.rm=F,permutations=0))
              env1<-scores(env,display="vectors")
              scores<-scores(plot1,display="sites",choice=1:2)
              scores.cent<-colMeans(scores[1:(max(nrow(scores))-1),])
              scores1<-scores[max(nrow(scores)),]

              test.site<-(abs((scores1[1]-env1[,1])*((plot1$CA$eig[1])/sum(plot1$CA$eig))))+(abs((scores1[2]-env1[,2])*((plot1$CA$eig[2])/sum(plot1$CA$eig))))
              names(test.site)<-rownames(env1)
              ref.mean<-(abs((scores.cent[1]-env1[,1])*((plot1$CA$eig[1])/sum(plot1$CA$eig))))+(abs((scores.cent[2]-env1[,2])*((plot1$CA$eig[2])/sum(plot1$CA$eig))))
              names(ref.mean)<-rownames(env1)
              difference<-data.frame(sort(test.site-ref.mean))

              tsa.results[row.names(g1[max(nrow(g1)),]),11]<-rownames(difference)[1]
              tsa.results[row.names(g1[max(nrow(g1)),]),12]<-rownames(difference)[max(nrow(difference))]

            }
          }
        }

        ###########################################################################################
        #Automatic model building #NOT YET IMPLIMENTED
        ##########################################################################################
        if (FALSE ) {#& test.cor.var==T & is.element(row.names(data.test[data.test[,1] %in% rownames(t2[paste0(data.test[j,1]),]),][i,]),row.names(pred1)) & (tsa.results[row.names(g1[max(nrow(g1)),]),3]=="Impaired" | tsa.results[row.names(g1[max(nrow(g1)),]),3]=="Possibly Impaired")) {

          pred.stand<-data.frame(matrix(nrow=nrow(g1),ncol=ncol(pred1)))
          rownames(pred.stand)<-rownames(g1)
          colnames(pred.stand)<-colnames(pred1)
          for (md1 in 1:nrow(g1)) {
            for (md2 in 1:ncol(pred1)) {
              pred.stand[md1,md2]<-(pred1[(rownames(g1)[md1]),md2]-mean(pred1[ref.sites,md2]))/sd(pred1[ref.sites,md2])
            }
          }
          mod.diff<-sort(abs(pred.stand[test.site.name,]-(colMeans(pred.stand[ref.sites,]))),decreasing=T)
          mod.pred<-pred1[rownames(g1),names(mod.diff)]

          plot1<-capscale(distance(tsa.stand,method="mahalanobis")~1,comm=g1,data=tsa.stand,add=F,sqrt.dist=F,dfun=distance)
          plot2<-capscale(tsa.stand~.,data=mod.pred,add=F,sqrt.dist=F,distance="mahalanobis",dfun=distance)

          envfit(tsa.modr0,choices=c(1:3),mod.pred)

          tsa.modr0<-capscale(tsa.stand~1,data=mod.pred,add=F,sqrt.dist=F,distance="mahalanobis",dfun=distance)
          tsa.modr1<-capscale(tsa.stand~.,data=mod.pred,add=F,sqrt.dist=F,distance="mahalanobis",dfun=distance)
          tsa.modr.forw <- step(tsa.modr0, scope = formula(tsa.modr1),direction="forward", test = "perm",step=1000,perm.max=9999)
          tsa.modr.forw$anova
          tsa.modr.back <- step(tsa.modr1, scope = formula(tsa.modr0),direction="backward", test = "perm",step=1000,perm.max=9999)
          tsa.modr.back$anova


          cca.modr0<- cca(g1 ~ 1,mod.pred)
          cca.modr1<- cca(g1~.,mod.pred)
          cca.modr.forw <- step(cca.modr0, scope = formula(cca.modr1), test = "perm",step=1000,perm.max=9999)
          cca.modr.forw$anova

          vif.cca(tsa.modr1)
          modr.back <- step(modr1, scope = list(lower = formula(modr0), upper = formula(modr1)), test = "perm")
          modrb
          modrb$anova
          vif.cca(modr1)

        }

        ###########################################################################################################
        #Plotting commands below
        ##########################################################################################################

        if (plot.map==T) {
          map.names1<-c(test.site.name.alone,as.character(t3[,test.site.name.alone]))[which(!is.na(c(test.site.name.alone,as.character(t3[,test.site.name.alone]))))]
          map.names<-map.names1[which(!duplicated(map.names1))]
          map.col<-c("darkred",rep("green4",(length(map.names)-1)))
          map1<- map + geom_point(data=gis.stations[map.names,], aes(x=EASTING, y=NORTHING),size=3.5,col=map.col)+
            geom_rect(data = gis.stations[map.names,], aes(xmin = EASTING -.4, xmax = EASTING + .4, ymin = NORTHING - .4, ymax = NORTHING + .4), fill = "grey20",size=1.5) +
            geom_text( data=gis.stations[map.names,], hjust=0.5, vjust=-0.5, aes(x=EASTING, y=NORTHING, label=STATION), colour="black", size=4,face=2 )

          png(paste(name.results.folder,"/",figure.folder,"/Maps/",rownames(g1[max(nrow(g1)),]),".png",sep=""),width=8,height=8,res=96,units="in")
          print(map1)
          dev.off()
        }

        if (export.tsa.plot==T & (nrow(g1)>5 & (Fish.ss==T|Benthic.ss==T))) {
          png(paste(name.results.folder,"/",figure.folder,"/TSA plots/","TSA ",rownames(g1[max(nrow(g1)),])," Distance",".png",sep=""),width=8,height=8,res=96,units="in")
          d1<-density(as.matrix(tsa.dist[1:(nrow(tsa.dist)-1),]))
          #curve((((nInd*(nRef-1))*df(x, df1=nInd, df2=(nRef-nInd), ncp=tsa.lambda, log=FALSE))/((nRef-nInd)*nRef)),yaxt="n",lty=2,cex=2,xlab="",ylab="",col="grey50",xlim=c(-1,(max(tsa.dist)+3)))
          curve(((nInd*(nRef-1))*df(x, df1=nInd, df2=(nRef-nInd), ncp=tsa.lambda, log=FALSE))/((nRef-nInd)*nRef),yaxt="n",lty=2,cex=2,xlab="",ylab="",col="grey50",xlim=c(-1,(max(tsa.dist)+3)))
          par(new=T)
          plot(d1,main=paste(rownames(g1[max(nrow(g1)),]),sep=""),yaxt="n",xlab="Distance",ylab="",xlim=c(-1,(max(tsa.dist)+3)))
          abline(v=((nInd*(nRef-1))*qf(0.95, df1=nInd, df2=(nRef-nInd), ncp=tsa.lambda, log=FALSE))/((nRef-nInd)*nRef), lty=2, col='red')
          abline(v=((nInd*(nRef-1))*qf(0.05, df1=nInd, df2=(nRef-nInd), ncp=tsa.lambda, log=FALSE))/((nRef-nInd)*nRef), lty=2, col='orange')
          points(tsa.dist[nrow(tsa.dist),],0, pch="*",col='black',cex=2,lwd=2)
          text(tsa.dist[nrow(tsa.dist),],0, labels="test-site",pos=2, offset=0.5,cex=1,col='black')
          dev.off()

          #png(paste(name.results.folder,"/",figure.folder,"/TSA plots/","TSA ",rownames(g1[max(nrow(g1)),]),"_SP",".png",sep=""),width=8,height=8,res=96,units="in")
          #plot(plot1,type="n",main=paste(rownames(g1[max(nrow(g1)),])," Species",sep=""),)
          #points(plot1,display="species",col="orange",pch=4,cex=0.8)
          #text(plot1,display="species",col="orange",cex=0.6,pos=3)
          #points(plot1,display="sites",select=data[rownames(g1),"Refsites"]==1,col="black")
          #points(plot1,display="sites",select=data[rownames(g1),"Refsites"]==0,col="red",pch=19)
          #text(plot1,display="sites",select=data[rownames(g1),"Refsites"]==1,col="black",cex=0.5,pos=3)
          #text(plot1,display="sites",select=data[rownames(g1),"Refsites"]==0,col="red",cex=0.7,pos=3)
          #suppressWarnings(ordiellipse(plot1,data[rownames(g1),"Refsites"],kind="sd",conf=0.95,draw="line",col="yellow",show.groups=1))
          #suppressWarnings(ordiellipse(plot1,data[rownames(g1),"Refsites"],kind="sd",conf=0.99,draw="line",col="red",show.groups=1))
          #dev.off()

          png(paste(name.results.folder,"/",figure.folder,"/TSA plots/","TSA ",rownames(g1[max(nrow(g1)),]),"_ST",".png",sep=""),width=8,height=8,res=96,units="in")
          plot(plot1,type="n",main=paste(rownames(g1[max(nrow(g1)),])," TSA Ordination",sep=""))
          points(plot1,display="sites",select=data[rownames(g1),"Refsites"]==1,col="black")
          points(plot1,display="sites",select=data[rownames(g1),"Refsites"]==0,col="red",pch=19)
          #suppressWarnings(ordiellipse(plot1,data[rownames(g1),"Refsites"],kind="sd",conf=0.95,draw="line",col="yellow",show.groups=1))
          suppressWarnings(ordiellipse(plot1,data[rownames(g1),"Refsites"],kind="sd",conf=0.99,draw="line",col="grey",lty=5,show.groups=1))
          text(plot1,display="sites",select=data[rownames(g1),"Refsites"]==1,col="black",pos=3)
          text(plot1,display="sites",select=data[rownames(g1),"Refsites"]==0,col="red",pos=3)
          dev.off()

          png(paste(name.results.folder,"/",figure.folder,"/TSA plots/","TSA ",rownames(g1[max(nrow(g1)),]),"_ST",".png",sep=""),width=8,height=8,res=96,units="in")
          plot(plot2,type="n",main=paste(rownames(g1[max(nrow(g1)),])," TSA Metrics",sep=""))
          Arrows(0,0,x1=scores(plot2, display="species",choices=1),y1=scores(plot2, display="species",choices=2),col="orange",cex=0.5,lwd=0.35,arr.lwd=0.35,arr.length=0.2,arr.width=0.1)
          points(plot2,display="sites",select=data[rownames(g1),"Refsites"]==1,col="black")
          points(plot2,display="sites",select=data[rownames(g1),"Refsites"]==0,col="red",pch=19)
          text(plot2,display="sites",select=data[rownames(g1),"Refsites"]==1,col="black",pos=3)
          text(plot2,display="sites",select=data[rownames(g1),"Refsites"]==0,col="red",pos=3)
          #suppressWarnings(ordiellipse(plot2,data[rownames(g1),"Refsites"],kind="sd",conf=0.95,draw="line",col="yellow",show.groups=1))
          suppressWarnings(ordiellipse(plot2,data[rownames(g1),"Refsites"],kind="sd",conf=0.99,draw="line",col="grey",lty=5,show.groups=1))
          text(plot2,display="species",col="orange",cex=0.5,pos=3)
          dev.off()

          if (use.cor.var==T) {
            if (!any(is.na(match(rownames(g1),rownames(pred1))))) {
              #I have subselected landuse features most important for this analysis
              d1<-(pred1[row.names(g1),])
              png(paste(name.results.folder,"/",figure.folder,"/TSA plots/","TSA ",rownames(g1[max(nrow(g1)),]),"_Cor",".png",sep=""),width=8,height=8,res=96,units="in")
              plot(plot1,type="n",main=paste(rownames(g1[max(nrow(g1)),])," Land Use",sep=""))
              points(plot1,display="sites",select=data[rownames(g1),"Refsites"]==1,col="black")
              points(plot1,display="sites",select=data[rownames(g1),"Refsites"]==0,col="red",pch=19)
              text(plot1,display="sites",select=data[rownames(g1),"Refsites"]==1,col="black",pos=3)
              text(plot1,display="sites",select=data[rownames(g1),"Refsites"]==0,col="red",pos=3)
              suppressWarnings(ordiellipse(plot1,data[rownames(g1),"Refsites"],kind="sd",conf=0.95,draw="line",col="yellow",show.groups=1))
              suppressWarnings(ordiellipse(plot1,data[rownames(g1),"Refsites"],kind="sd",conf=0.99,draw="line",col="red",show.groups=1))
              plot(envfit(plot1,d1[,colSums(d1)>0],display="sites",na.rm=F,permutations=0))
              dev.off()
            }
          }
        }

        if (export.ord.plot==T) {
          png(paste(name.results.folder,"/",figure.folder,"/Ordination plots/","Ord ",rownames(g1[max(nrow(g1)),]),"_SP",".png",sep=""),width=8,height=8,res=96,units="in")
          plot(b,type="n",main=paste(rownames(g1[max(nrow(g1)),])," Species",sep=""))
          points(b,display="species",col="orange",pch=4,cex=0.8)
          #points(p4,pch=10,col="purple")
          text(b,display="species",col="orange",cex=0.6,pos=1)
          points(b,display="sites",select=data[rownames(g1),"Refsites"]==1,col="black")
          points(b,display="sites",select=data[rownames(g1),"Refsites"]==0,col="red",pch=19)
          text(b,display="sites",select=data[rownames(g1),"Refsites"]==1,col="black",pos=3)
          text(b,display="sites",select=data[rownames(g1),"Refsites"]==0,col="red",pos=3)
          suppressWarnings(ordiellipse(b,data[rownames(g1),"Refsites"],kind="sd",conf=0.90,draw="line",col="yellow",show.groups=1))
          #suppressWarnings(ordiellipse(b,data[rownames(g1),"Refsites"],kind="sd",conf=0.95,draw="line",col="orange",show.groups=1))
          suppressWarnings(ordiellipse(b,data[rownames(g1),"Refsites"],kind="sd",conf=0.99,draw="line",col="red",show.groups=1))
          dev.off()

          png(paste(name.results.folder,"/",figure.folder,"/Ordination plots/","Ord ",rownames(g1[max(nrow(g1)),]),"_ST",".png",sep=""),width=8,height=8,res=96,units="in")
          plot(b,type="n",main=paste(rownames(g1[max(nrow(g1)),])," Sites",sep=""))
          points(b,display="sites",select=data[rownames(g1),"Refsites"]==1,col="black")
          points(b,display="sites",select=data[rownames(g1),"Refsites"]==0,col="red",pch=19)
          text(b,display="sites",select=data[rownames(g1),"Refsites"]==1,col="black",pos=3)
          text(b,display="sites",select=data[rownames(g1),"Refsites"]==0,col="red",pos=3)
          suppressWarnings(ordiellipse(b,data[rownames(g1),"Refsites"],kind="sd",conf=0.90,draw="line",col="yellow",show.groups=1))
          #suppressWarnings(ordiellipse(b,data[rownames(g1),"Refsites"],kind="sd",conf=0.95,draw="line",col="orange",show.groups=1))
          suppressWarnings(ordiellipse(b,data[rownames(g1),"Refsites"],kind="sd",conf=0.99,draw="line",col="red",show.groups=1))
          dev.off()

          if (use.cor.var==T) {
            if (!any(is.na(match(rownames(g1),rownames(pred1))))) {
              #I have subselected landuse features most important for this analysis
              d1<-(pred1[row.names(g1),])
              png(paste(name.results.folder,"/",figure.folder,"/Ordination plots/","Ord ",rownames(g1[max(nrow(g1)),]),"_Cor",".png",sep=""),width=8,height=8,res=96,units="in")
              plot(b,type="n",main=paste(rownames(g1[max(nrow(g1)),])," TSA Correlations",sep=""))
              points(b,display="sites",select=data[rownames(g1),"Refsites"]==1,col="black")
              points(b,display="sites",select=data[rownames(g1),"Refsites"]==0,col="red",pch=19)
              suppressWarnings(ordiellipse(b,data[rownames(g1),"Refsites"],kind="sd",conf=0.90,draw="line",col="yellow",show.groups=1))
              #suppressWarnings(ordiellipse(b,data[rownames(g1),"Refsites"],kind="sd",conf=0.95,draw="line",col="orange",show.groups=1))
              suppressWarnings(ordiellipse(b,data[rownames(g1),"Refsites"],kind="sd",conf=0.99,draw="line",col="red",show.groups=1))
              text(b,display="sites",select=data[rownames(g1),"Refsites"]==1,col="black",pos=3)
              text(b,display="sites",select=data[rownames(g1),"Refsites"]==0,col="red",pos=3)
              plot(envfit(b,d1[,colSums(d1)>0],display="sites",na.rm=F,permutations=0))
              dev.off()
            }
          }
        }
        ##########################################################################
        #Multiplot commands
        ##########################################################################

        old.par <- par(mar = c(0, 0, 0, 0))
        par(old.par)
        if (multiplot==T) {
          dev.off()
          cols<-colorRampPalette(brewer.pal(12, "Paired"))(ncol(summ))
          text<-paste(seq(1:ncol(tsa.stand1)),colnames(tsa.stand1),sep=".")

          if (Fish.ss==T) {
            if (tsa.results[test.site.name,3]!=tsa.results[test.site.name,4]) {
              text1<-v2[test.site.name.alone,2]
              text1[text1>0.5]<-"Above Escarpment"
              text1[text1<=0.5]<-"Below Escarpment"
              if (text1=="Above Escarpment") {
                text2<-(text.t)[which(((text.t)) %in% heg)]
                text3<-(text.t)[which(((text.t)) %in% leg)]
              }
              if (text1=="Below Escarpment") {
                text2<-(text.t)[which(((text.t)) %in% hbg)]
                text3<-(text.t)[which(((text.t)) %in% lbg)]
              }
            }
          }

          if (Benthic.ss==T) {
            if (tsa.results[test.site.name,3]!=tsa.results[test.site.name,4]) {
              text1<-v2[test.site.name.alone,2]
              text1[text1>0.5]<-"Above Escarpment"
              text1[text1<=0.5]<-"Below Escarpment"
              text2<-(text.t)[which(((text.t)) %in% hg)]
              text3<-(text.t)[which(((text.t)) %in% lg)]
            }
          }

          #y1<-as.matrix(((summ[rownames(g1[max(nrow(g1)),]),])/(colMeans(summ[rownames(g1[1:(max(nrow(g1))-1),]),]))))
          #y1[which(y1==Inf)]<-as.matrix(((summ[rownames(g1[max(nrow(g1)),]),])/0.001))[which(y1==Inf)]
          #y1[is.nan(y1)]=0
          #y1[is.infinite(y1)]=2

          if (plot.map==T) {
            map.names1<-c(test.site.name.alone,as.character(t3[,test.site.name.alone]))[which(!is.na(c(test.site.name.alone,as.character(t3[,test.site.name.alone]))))]
            map.names<-map.names1[which(!duplicated(map.names1))]
            map.col<-c("darkred",rep("green4",(length(map.names)-1)))
            map1<- map + geom_point(data=gis.stations[map.names,], aes(x=EASTING, y=NORTHING),size=3.5,col=map.col)+
              geom_rect(data = gis.stations[map.names,], aes(xmin = EASTING -.4, xmax = EASTING + .4, ymin = NORTHING - .4, ymax = NORTHING + .4), fill = "grey20",size=1.5) +
              geom_text( data=gis.stations[map.names,], hjust=0.5, vjust=-0.5, aes(x=EASTING, y=NORTHING, label=STATION), colour="black", size=4,face=2 )

          }

          pdf(paste(name.results.folder,"/",figure.folder,"/Multiplots/",rownames(g1[max(nrow(g1)),]),".pdf",sep=""),width=8.5,height=11)

          suppressWarnings(split.screen(c(3,2)))

          split.screen(c(1,2),screen=1)
          if (override.ref.sel==F) {
            if (nn.method=="Euclidean") {
              if (test.site.name.alone%in%rownames(tt2.dist.e)) {
                if (tt2.dist.e[test.site.name.alone,min(which(tt2.dist.e[test.site.name.alone,]>0))] > quantile(tt2.dist.e$X1[which(tt2.dist.e$X1>0)],0.90)){
                  if (tsa.results[test.site.name,3]==tsa.results[test.site.name,4]) {
                    textplot(c(paste("Status of",test.site.name.alone,"in",test.site.year.alone,sep=" "),tsa.results[test.site.name,4],if (Fish.ss==T & sum(taxa[test.site.name,3:(n.taxa+2)])<5) {paste0("Fewer than 5 Fish Caught- Results suspect")},"","Reference Sites (Poor Fit)",as.vector(t3[!is.na(t2[paste0(data[test.site.name,1]),]),paste0(data[test.site.name,1])])),cex=0.5, halign="left",valign="top")
                  } else {
                    textplot(c(paste("Status of",test.site.name.alone,"in",test.site.year.alone,sep=" "),paste(tsa.results[test.site.name,4]),if (Fish.ss==T & sum(taxa[test.site.name,3:(n.taxa+2)])<5) {paste0("Fewer than 5 Fish Caught- Results suspect")},"",
                               if (Fish.ss==T) {
                                 paste0("Adjusted from ",tsa.results[test.site.name,3]," because site is ")
                               },
                               if (Fish.ss==T) {
                                 paste0(text1," with")
                               },
                               if (Benthic.ss==T) {
                                 paste0(paste0("Adjusted from ",tsa.results[test.site.name,3]," because"),"")
                               },
                               if (length(text2)!=0){
                                 paste0("High: ", paste0(as.vector(text2),sep=", ",collapse=""))
                               },
                               if (length(text3)!=0){
                                 paste0("Low: ", paste0(as.vector(text3),sep=", ",collapse=""))
                               },
                               "","Reference Sites (Poor Fit)",as.vector(t3[!is.na(t2[paste0(data[test.site.name,1]),]),paste0(data[test.site.name,1])])),cex=0.5, halign="left",valign="top")
                  }
                } else {
                  if (tsa.results[test.site.name,3]==tsa.results[test.site.name,4]) {
                    textplot(c(paste("Status of",test.site.name.alone,"in",test.site.year.alone,sep=" "),tsa.results[test.site.name,4],if (Fish.ss==T & sum(taxa[test.site.name,3:(n.taxa+2)])<5) {paste0("Fewer than 5 Fish Caught- Results suspect")},"","Reference Sites",as.vector(t3[!is.na(t2[paste0(data[test.site.name,1]),]),paste0(data[test.site.name,1])])),cex=0.5, halign="left",valign="top")
                  } else {
                    textplot(c(paste("Status of",test.site.name.alone,"in",test.site.year.alone,sep=" "),paste(tsa.results[test.site.name,4]),if (Fish.ss==T & sum(taxa[test.site.name,3:(n.taxa+2)])<5) {paste0("Fewer than 5 Fish Caught- Results suspect")},"",
                               if (Fish.ss==T) {
                                 paste0("Adjusted from ",tsa.results[test.site.name,3]," because site is ")
                               },
                               if (Fish.ss==T) {
                                 paste0(text1," with")
                               },
                               if (Benthic.ss==T) {
                                 paste0(paste0("Adjusted from ",tsa.results[test.site.name,3]," because"),"")
                               },
                               if (length(text2)!=0){
                                 paste0("High: ", paste0(as.vector(text2),sep=", ",collapse=""))
                               },
                               if (length(text3)!=0){
                                 paste0("Low: ", paste0(as.vector(text3),sep=", ",collapse=""))
                               },
                               "","Reference Sites",as.vector(t3[!is.na(t2[paste0(data[test.site.name,1]),]),paste0(data[test.site.name,1])])),cex=0.5, halign="left",valign="top")
                  }
                }
              }
              if (test.site.name.alone%in%rownames(tt2.dist.b)) {
                if (tt2.dist.b[test.site.name.alone,min(which(tt2.dist.b[test.site.name.alone,]>0))] > quantile(tt2.dist.b$X1[which(tt2.dist.b$X1>0)],0.90)){
                  if (tsa.results[test.site.name,3]==tsa.results[test.site.name,4]) {
                    textplot(c(paste("Status of",test.site.name.alone,"in",test.site.year.alone,sep=" "),tsa.results[test.site.name,4],if (Fish.ss==T & sum(taxa[test.site.name,3:(n.taxa+2)])<5) {paste0("Fewer than 5 Fish Caught- Results suspect")},"","Reference Sites (Poor Fit)",as.vector(t3[!is.na(t2[paste0(data[test.site.name,1]),]),paste0(data[test.site.name,1])])),cex=0.5, halign="left",valign="top")
                  } else {
                    textplot(c(paste("Status of",test.site.name.alone,"in",test.site.year.alone,sep=" "),paste(tsa.results[test.site.name,4]),if (Fish.ss==T & sum(taxa[test.site.name,3:(n.taxa+2)])<5) {paste0("Fewer than 5 Fish Caught- Results suspect")},"",
                               if (Fish.ss==T) {
                                 paste0("Adjusted from ",tsa.results[test.site.name,3]," because site is ")
                               },
                               if (Fish.ss==T) {
                                 paste0(text1," with")
                               },
                               if (Benthic.ss==T) {
                                 paste0(paste0("Adjusted from ",tsa.results[test.site.name,3]," because"),"")
                               },
                               if (length(text2)!=0){
                                 paste0("High: ", paste0(as.vector(text2),sep=", ",collapse=""))
                               },
                               if (length(text3)!=0){
                                 paste0("Low: ", paste0(as.vector(text3),sep=", ",collapse=""))
                               },
                               "","Reference Sites (Poor Fit)",as.vector(t3[!is.na(t2[paste0(data[test.site.name,1]),]),paste0(data[test.site.name,1])])),cex=0.5, halign="left",valign="top")
                  }
                } else {
                  if (tsa.results[test.site.name,3]==tsa.results[test.site.name,4]) {
                    textplot(c(paste("Status of",test.site.name.alone,"in",test.site.year.alone,sep=" "),tsa.results[test.site.name,4],if (Fish.ss==T & sum(taxa[test.site.name,3:(n.taxa+2)])<5) {paste0("Fewer than 5 Fish Caught- Results suspect")},"","Reference Sites",as.vector(t3[!is.na(t2[paste0(data[test.site.name,1]),]),paste0(data[test.site.name,1])])),cex=0.5, halign="left",valign="top")
                  } else {
                    textplot(c(paste("Status of",test.site.name.alone,"in",test.site.year.alone,sep=" "),paste(tsa.results[test.site.name,4]),if (Fish.ss==T & sum(taxa[test.site.name,3:(n.taxa+2)])<5) {paste0("Fewer than 5 Fish Caught- Results suspect")},"",
                               if (Fish.ss==T) {
                                 paste0("Adjusted from ",tsa.results[test.site.name,3]," because site is ")
                               },
                               if (Fish.ss==T) {
                                 paste0(text1," with")
                               },
                               if (Benthic.ss==T) {
                                 paste0(paste0("Adjusted from ",tsa.results[test.site.name,3]," because"),"")
                               },
                               if (length(text2)!=0){
                                 paste0("High: ", paste0(as.vector(text2),sep=", ",collapse=""))
                               },
                               if (length(text3)!=0){
                                 paste0("Low: ", paste0(as.vector(text3),sep=", ",collapse=""))
                               },
                               "","Reference Sites",as.vector(t3[!is.na(t2[paste0(data[test.site.name,1]),]),paste0(data[test.site.name,1])])),cex=0.5, halign="left",valign="top")
                  }
                }
              }
            }
            if (nn.method=="ANNA") {
              if (test.site.name.alone%in%rownames(tt2.dist)) {
                if (tt2.dist[test.site.name.alone,min(which(tt2.dist[test.site.name.alone,]>0))] > quantile(tt2.dist$X2[which(tt2.dist$X2>0)],0.90)){
                  if (tsa.results[test.site.name,3]==tsa.results[test.site.name,4]) {
                    textplot(c(paste("Status of",test.site.name.alone,"in",test.site.year.alone,sep=" "),tsa.results[test.site.name,4],if (Fish.ss==T & sum(taxa[test.site.name,3:(n.taxa+2)])<5) {paste0("Fewer than 5 Fish Caught- Results suspect")},"","Reference Sites (Poor Fit)",as.vector(t3[!is.na(t2[paste0(data[test.site.name,1]),]),paste0(data[test.site.name,1])])),cex=0.5, halign="left",valign="top")
                  } else {
                    textplot(c(paste("Status of",test.site.name.alone,"in",test.site.year.alone,sep=" "),paste(tsa.results[test.site.name,4]),if (Fish.ss==T & sum(taxa[test.site.name,3:(n.taxa+2)])<5) {paste0("Fewer than 5 Fish Caught- Results suspect")},"",
                               if (Fish.ss==T) {
                                 paste0("Adjusted from ",tsa.results[test.site.name,3]," because site is ")
                               },
                               if (Fish.ss==T) {
                                 paste0(text1," with")
                               },
                               if (Benthic.ss==T) {
                                 paste0(paste0("Adjusted from ",tsa.results[test.site.name,3]," because"),"")
                               },
                               if (length(text2)!=0){
                                 paste0("High: ", paste0(as.vector(text2),sep=", ",collapse=""))
                               },
                               if (length(text3)!=0){
                                 paste0("Low: ", paste0(as.vector(text3),sep=", ",collapse=""))
                               },
                               "","Reference Sites (Poor Fit)",as.vector(t3[!is.na(t2[paste0(data[test.site.name,1]),]),paste0(data[test.site.name,1])])),cex=0.5, halign="left",valign="top")
                  }
                } else {
                  if (tsa.results[test.site.name,3]==tsa.results[test.site.name,4]) {
                    textplot(c(paste("Status of",test.site.name.alone,"in",test.site.year.alone,sep=" "),tsa.results[test.site.name,4],if (Fish.ss==T & sum(taxa[test.site.name,3:(n.taxa+2)])<5) {paste0("Fewer than 5 Fish Caught- Results suspect")},"","Reference Sites",as.vector(t3[!is.na(t2[paste0(data[test.site.name,1]),]),paste0(data[test.site.name,1])])),cex=0.5, halign="left",valign="top")
                  } else {
                    textplot(c(paste("Status of",test.site.name.alone,"in",test.site.year.alone,sep=" "),paste(tsa.results[test.site.name,4]),if (Fish.ss==T & sum(taxa[test.site.name,3:(n.taxa+2)])<5) {paste0("Fewer than 5 Fish Caught- Results suspect")},"",
                               if (Fish.ss==T) {
                                 paste0("Adjusted from ",tsa.results[test.site.name,3]," because site is ")
                               },
                               if (Fish.ss==T) {
                                 paste0(text1," with")
                               },
                               if (Benthic.ss==T) {
                                 paste0(paste0("Adjusted from ",tsa.results[test.site.name,3]," because"),"")
                               },
                               if (length(text2)!=0){
                                 paste0("High: ", paste0(as.vector(text2),sep=", ",collapse=""))
                               },
                               if (length(text3)!=0){
                                 paste0("Low: ", paste0(as.vector(text3),sep=", ",collapse=""))
                               },
                               "","Reference Sites",as.vector(t3[!is.na(t2[paste0(data[test.site.name,1]),]),paste0(data[test.site.name,1])])),cex=0.5, halign="left",valign="top")
                  }
                }
              }
            }
          }

          if (override.ref.sel==T) {
            if (tsa.results[test.site.name,3]==tsa.results[test.site.name,4]) {
              textplot(c(paste("Status of",test.site.name.alone,"in",test.site.year.alone,sep=" "),tsa.results[test.site.name,4],if (Fish.ss==T & sum(taxa[test.site.name,3:(n.taxa+2)])<5) {paste0("Fewer than 5 Fish Caught- Results suspect")},"","Reference Sites",as.vector(t3[!is.na(t2[paste0(data[test.site.name,1]),]),paste0(data[test.site.name,1])])),cex=0.5, halign="left",valign="top")
            } else {
              textplot(c(paste("Status of",test.site.name.alone,"in",test.site.year.alone,sep=" "),paste(tsa.results[test.site.name,4]),if (Fish.ss==T & sum(taxa[test.site.name,3:(n.taxa+2)])<5) {paste0("Fewer than 5 Fish Caught- Results suspect")},"",
                         if (Fish.ss==T) {
                           paste0("Adjusted from ",tsa.results[test.site.name,3]," because site is ")
                         },
                         if (Fish.ss==T) {
                           paste0(text1," with")
                         },
                         if (Benthic.ss==T) {
                           paste0(paste0("Adjusted from ",tsa.results[test.site.name,3]," because"),"")
                         },
                         if (length(text2)!=0){
                           paste0("High: ", paste0(as.vector(text2),sep=", ",collapse=""))
                         },
                         if (length(text3)!=0){
                           paste0("Low: ", paste0(as.vector(text3),sep=", ",collapse=""))
                         },
                         "","Reference Sites",as.vector(t3[!is.na(t2[paste0(data[test.site.name,1]),]),paste0(data[test.site.name,1])])),cex=0.5, halign="left",valign="top")
            }
          }

          screen(8)
          plot(0,0, type="n", axes=F, xlab="", ylab="")
          legend("topleft",text,cex=0.45,fill=cols,bty="n",x.intersp=0.85,y.intersp=0.85)

          screen(2)
          boxplot(tsa.stand1[1:(nrow(tsa.stand)-1),],col=cols,outlines=F,yaxt="n",ylim=c(min(tsa.stand1)*1.3,max(tsa.stand1)*1.1),names=seq(1:length(text)),main="Differences Between Test\nand Reference Sites",cex.axis=0.7)
          points(seq(1:ncol(tsa.stand1)),tsa.stand1[nrow(tsa.stand1),],col="red",pch=19,cex=1)
          points(which(colnames(tsa.stand1)%in%colnames(tsa.stand)),tsa.stand1[nrow(tsa.stand1),subset(colnames(tsa.stand1),subset=colnames(tsa.stand1)%in%colnames(tsa.stand))],col="black",pch="O",cex=1.5)
          if (any(part.tsa$p<0.05)) {
            points(which(colnames(tsa.stand1)%in%rownames(part.tsa)[part.tsa$p<0.05]),rep((min(tsa.stand1)*1.3),length(rownames(part.tsa)[part.tsa$p<0.05])),col="red",pch="*",cex=2)
          }

          screen(3)

          if (plot.map==F) {
            plot(plot2,type="n",main=paste(rownames(g1[max(nrow(g1)),])," TSA Metrics",sep=""))
            Arrows(0,0,x1=scores(plot2, display="species",choices=1),y1=scores(plot2, display="species",choices=2),col="orange",cex=0.5,lwd=0.35,arr.lwd=0.35,arr.length=0.2,arr.width=0.1)
            points(plot2,display="sites",select=data[rownames(g1),"Refsites"]==1,col="black",cex=0.4)
            points(plot2,display="sites",select=data[rownames(g1),"Refsites"]==0,col="red",pch=19,cex=0.5)
            text(plot2,display="sites",select=data[rownames(g1),"Refsites"]==1,col="black",cex=0.4,pos=3)
            text(plot2,display="sites",select=data[rownames(g1),"Refsites"]==0,col="red",cex=0.5,pos=3)
            #suppressWarnings(ordiellipse(plot2,data[rownames(g1),"Refsites"],kind="sd",conf=0.95,draw="line",col="yellow",show.groups=1))
            suppressWarnings(ordiellipse(plot2,data[rownames(g1),"Refsites"],kind="sd",conf=0.99,draw="line",col="grey",lty=5,show.groups=1))
            text(plot2,display="species",col="orange",cex=0.5,pos=3)

          }

          #plot(plot2,type="n",main=paste(rownames(g1[max(nrow(g1)),])," TSA",sep=""))
          #suppressWarnings(ordiellipse(plot2,data[rownames(g1),"Refsites"],kind="sd",conf=0.95,draw="line",col="orange",show.groups=1))
          #suppressWarnings(ordiellipse(plot2,data[rownames(g1),"Refsites"],kind="sd",conf=0.99,draw="line",col="red",show.groups=1))
          #arrows(0,0,x1=scores(plot2, display="species",choices=1),y1=scores(plot2, display="species",choices=2),col="orange",cex=0.5,lwd=0.6)
          #text(plot2,display="species",col="orange",cex=0.5,pos=3)
          #points(plot2,display="sites",cex=0.5,select=data[rownames(g1),"Refsites"]==1,col="black")
          #points(plot2,display="sites",cex=0.5,select=data[rownames(g1),"Refsites"]==0,col="red",pch=19)
          #text(plot2,display="sites",select=data[rownames(g1),"Refsites"]==1,col="black",cex=0.4,pos=3)
          #text(plot2,display="sites",select=data[rownames(g1),"Refsites"]==0,col="red",cex=0.5,pos=3)

          screen(4)
          d1<-density(as.matrix(tsa.dist[1:(nrow(tsa.dist)-1),]))
          #curve((((nInd*(nRef-1))*df(x, df1=nInd, df2=(nRef-nInd), ncp=tsa.lambda, log=FALSE))/((nRef-nInd)*nRef)),yaxt="n",lty=2,cex=2,xlab="",ylab="",col="grey50",xlim=c(-1,(max(tsa.dist)+3)))
          curve(((nInd*(nRef-1))*df(x, df1=nInd, df2=(nRef-nInd), ncp=tsa.lambda, log=FALSE))/((nRef-nInd)*nRef),yaxt="n",lty=2,cex=2,xlab="",ylab="",col="grey50",xlim=c(-1,(max(tsa.dist)+3)))
          par(new=T)
          plot(d1,main=paste(rownames(g1[max(nrow(g1)),]),sep=""),yaxt="n",xlab="Distance",ylab="",xlim=c(-1,(max(tsa.dist)+3)))
          abline(v=((nInd*(nRef-1))*qf(0.95, df1=nInd, df2=(nRef-nInd), ncp=tsa.lambda, log=FALSE))/((nRef-nInd)*nRef), lty=2, col='red')
          abline(v=((nInd*(nRef-1))*qf(0.05, df1=nInd, df2=(nRef-nInd), ncp=tsa.lambda, log=FALSE))/((nRef-nInd)*nRef), lty=2, col='orange')
          points(tsa.dist[nrow(tsa.dist),],0, pch="*",col='black',cex=2,lwd=2)
          text(tsa.dist[nrow(tsa.dist),],0, labels="test-site",pos=2, offset=0.5,cex=1,col='black')

          #if (!any(is.na(match(rownames(g1),rownames(pred1)))) & use.cor.var==T) {
          #  d1<-(pred1[row.names(g1),])
          #  plot(plot1,type="n",main=paste(rownames(g1[max(nrow(g1)),])," TSA Correlations",sep=""))
          #  #suppressWarnings(ordiellipse(plot1,data[rownames(g1),"Refsites"],kind="sd",conf=0.95,draw="line",col="yellow",show.groups=1))
          #  #suppressWarnings(ordiellipse(plot1,data[rownames(g1),"Refsites"],kind="sd",conf=0.99,draw="line",col="red",show.groups=1))
          #  plot(envfit(plot1,d1[,colSums(d1)>0],display="sites",na.rm=F,permutations=0),cex=0.5)
          #  points(plot1,display="sites",cex=0.5,select=data[rownames(g1),"Refsites"]==1,col="black")
          #  points(plot1,display="sites",cex=0.5,select=data[rownames(g1),"Refsites"]==0,col="red",pch=19)
          #  text(plot1,display="sites",select=data[rownames(g1),"Refsites"]==1,col="black",cex=0.4,pos=3)
          #  text(plot1,display="sites",select=data[rownames(g1),"Refsites"]==0,col="red",cex=0.5,pos=3)
          #} else {
          #  textplot("Missing data")
          #}
          screen(5)
          plot(b,type="n",main=paste(rownames(g1[max(nrow(g1)),])," \nCorrespondence Analysis",sep=""))
          #suppressWarnings(ordiellipse(b,data[rownames(g1),"Refsites"],kind="sd",conf=0.95,draw="line",col="yellow",show.groups=1))
          #suppressWarnings(ordiellipse(b,data[rownames(g1),"Refsites"],kind="sd",conf=0.99,draw="line",col="red",show.groups=1))
          points(b,display="species",cex=0.35,col="orange",pch=4)
          text(b,display="species",col="orange",cex=0.5,pos=1)
          points(b,display="sites",cex=0.4,select=data[rownames(g1),"Refsites"]==1,col="black")
          points(b,display="sites",cex=0.5,select=data[rownames(g1),"Refsites"]==0,col="red",pch=19)
          text(b,display="sites",select=data[rownames(g1),"Refsites"]==1,col="black",cex=0.4,pos=3)
          text(b,display="sites",select=data[rownames(g1),"Refsites"]==0,col="red",cex=0.5,pos=3)

          screen(6)
          if (use.cor.var==T) {
            if (!any(is.na(match(rownames(g1),rownames(pred1))))) {
              d1<-(pred1[row.names(g1),])
              plot(plot1,type="n",main=paste(rownames(g1[max(nrow(g1)),])," TSA Correlations",sep=""))
              points(plot1,display="sites",cex=0.5,select=data[rownames(g1),"Refsites"]==1,col="black")
              points(plot1,display="sites",cex=0.5,select=data[rownames(g1),"Refsites"]==0,col="red",pch=19)
              #suppressWarnings(ordiellipse(plot1,data[rownames(g1),"Refsites"],kind="sd",conf=0.95,draw="line",col="yellow",show.groups=1))
              suppressWarnings(ordiellipse(plot1,data[rownames(g1),"Refsites"],kind="sd",conf=0.99,draw="line",col="grey",lty=5,show.groups=1))
              text(plot1,display="sites",select=data[rownames(g1),"Refsites"]==1,col="black",cex=0.4,pos=3)
              text(plot1,display="sites",select=data[rownames(g1),"Refsites"]==0,col="red",cex=0.5,pos=3)
              plot(envfit(plot1,d1[,colSums(d1)>0],display="sites",na.rm=F,permutations=0),cex=0.5)
            } else {
              textplot("Missing data")
            }
          } else {
            plot(plot1,type="n",main=paste(rownames(g1[max(nrow(g1)),])," TSA Ordination",sep=""))
            points(plot1,display="sites",cex=0.5,select=data[rownames(g1),"Refsites"]==1,col="black")
            points(plot1,display="sites",cex=0.5,select=data[rownames(g1),"Refsites"]==0,col="red",pch=19)
            #suppressWarnings(ordiellipse(plot1,data[rownames(g1),"Refsites"],kind="sd",conf=0.95,draw="line",col="yellow",show.groups=1))
            suppressWarnings(ordiellipse(plot1,data[rownames(g1),"Refsites"],kind="sd",conf=0.99,draw="line",col="grey",lty=5,show.groups=1))
            text(plot1,display="sites",select=data[rownames(g1),"Refsites"]==1,col="black",cex=0.4,pos=3)
            text(plot1,display="sites",select=data[rownames(g1),"Refsites"]==0,col="red",cex=0.5,pos=3)
          }

          #if (!any(is.na(match(rownames(g1),rownames(pred1)))) & use.cor.var==T) {
          #  d1<-(pred1[row.names(g1),])
          #  plot(b,type="n",main=paste(rownames(g1[max(nrow(g1)),])," \nCorrespondence Analysis Correlations",sep=""))
          #  #suppressWarnings(ordiellipse(b,data[rownames(g1),"Refsites"],kind="sd",conf=0.95,draw="line",col="Yellow",show.groups=1))
          #  #suppressWarnings(ordiellipse(b,data[rownames(g1),"Refsites"],kind="sd",conf=0.99,draw="line",col="red",show.groups=1))
          #  plot(envfit(b,d1[,colSums(d1)>0],display="sites",na.rm=F,permutations=0),cex=0.5)
          #  points(b,display="sites",cex=0.5,select=data[rownames(g1),"Refsites"]==1,col="black")
          #  points(b,display="sites",cex=0.5,select=data[rownames(g1),"Refsites"]==0,col="red",pch=19)
          #  text(b,display="sites",select=data[rownames(g1),"Refsites"]==1,col="black",cex=0.4,pos=3)
          #  text(b,display="sites",select=data[rownames(g1),"Refsites"]==0,col="red",cex=0.5,pos=3)
          #ord2p<-recordPlot()
          #} else {
          #  textplot("Missing data")

          close.screen(all = TRUE)

          if (plot.map==T) {
            vp1 <- viewport(height=0.4, width=0.5, just=c("left","top"), y=0.75, x=0)
            print(map1, vp=vp1)
          }

          dev.off()
          #dev.off()
          par(old.par)
        }

        #############################################################################
        # Assessing impairment with ordination - removed
        #############################################################################

        #y2<-scores(b,display="sites",choice=1:2)
        #y3<-y2[max(nrow(y2)),]
        #y4<-colMeans(y2[1:(nrow(y2)-1),])
        #ord.dist<-data.frame(matrix(nrow=nrow(y2),ncol=1))
        #rownames(ord.dist)<-rownames(y2)
        #colnames(ord.dist)<-"Distance"
        #for (v1 in 1:nrow(y2)) {
        #  ord.dist[v1,1]<-(abs((y2[v1,1]-y4[1])*(((b$CA$eig)[1])/sum(b$CA$eig))))+(abs((y2[v1,2]-y4[2])*(((b$CA$eig)[2])/sum(b$CA$eig))))
        #}

        #if (ord.dist[nrow(ord.dist),]>quantile(ord.dist[,1],0.99)) {
        #  tsa.results[row.names(g1[max(nrow(g1)),]),11]<-"Impaired"
        #} else if (ord.dist[nrow(ord.dist),]>quantile(ord.dist[,1],0.90)){
        #  tsa.results[row.names(g1[max(nrow(g1)),]),11]<-"Possibly Impaired"
        #} else {
        #  tsa.results[row.names(g1[max(nrow(g1)),]),11]<-"Not impaired"
        #}

        results[row.names(g1[max(nrow(g1)),]),]<-(summ[rownames(g1[max(nrow(g1)),]),])-colMeans(summ[rownames(g1[1:(max(nrow(g1))-1),]),])

        if (export.metric.plot==T) {
          cols<-colorRampPalette(brewer.pal(12, "Paired"))(ncol(summ))
          text<-paste(seq(1:ncol(tsa.stand1)),colnames(tsa.stand1),sep=".")
          dev.off()

          png(paste(name.results.folder,"/",figure.folder,"/Metric Differences/",rownames(g1[max(nrow(g1)),]),".png",sep=""),width=6,height=10,res=96,units="in")
          suppressWarnings(split.screen(c(2,1)))
          boxplot(tsa.stand1[1:(nrow(tsa.stand)-1),],col=cols,outlines=F,yaxt="n",ylim=c(min(tsa.stand1)*1.3,max(tsa.stand1)*1.1),names=seq(1:length(text)),main="Differences Between Test\nand Reference Sites",cex.axis=0.7)
          points(seq(1:ncol(tsa.stand1)),tsa.stand1[nrow(tsa.stand1),],col="red",pch=19,cex=1)
          points(which(colnames(tsa.stand1)%in%colnames(tsa.stand)),tsa.stand1[nrow(tsa.stand1),subset(colnames(tsa.stand1),subset=colnames(tsa.stand1)%in%colnames(tsa.stand))],col="black",pch="O",cex=1.5)
          if (any(part.tsa$p<0.05)) {
            points(which(colnames(tsa.stand1)%in%rownames(part.tsa)[part.tsa$p<0.05]),rep((min(tsa.stand1)*1.3),length(rownames(part.tsa)[part.tsa$p<0.05])),col="red",pch="*",cex=2)
          }
          screen(2)
          plot(1, type="n", axes=F, xlab="", ylab="")
          legend("topleft",text[1:floor(length(text)/2)],cex=0.85,fill=cols[1:floor(length(cols)/2)],bty="n",x.intersp=0.85,y.intersp=0.85)
          legend("topright",text[((floor(length(text)/2)+1):length(text))],cex=0.85,fill=cols[((floor(length(cols)/2)+1):length(cols))],bty="n",x.intersp=0.85,y.intersp=0.85)
          close.screen(all=T)
          dev.off()
          #suppressWarnings(rm(cols,t1,difference,tsa.stand,tsa.dist,n.v1,n1,n2,plot1,plot2,tsa1.env,env1,scores,scores1,scores.cent,test.site,ref.mean,g2,g,test.site,b,p,p1,p2,p3,p4,dist,dist1,Lambda,F,NCPinterval,NCPequivalence,temp,i,w,q,a,env,env1,scores,scores1,d1,tsa1,tsa2,tsa3,tsa4,tsa5,tsa6))
        }
      }
    }
  }
  if (TSA==T) {
    write.csv(tsa.results,paste(name.results.folder,"/",results.folder,"/","TSA results.csv",sep=""))
  }

  if (override.ref.sel==F) {
    if (nn.method=="Euclidean") {
      tt2.dist.e<-cbind(tt2.dist.e,blank)
      colnames(tt2.dist.e)<-1:ncol(tt2.dist.e)
      colnames(tt2.dist.b)<-1:ncol(tt2.dist.b)
      tt2.dist<-rbind(tt2.dist.e,tt2.dist.b)
    }

    write.csv(t2,paste(name.results.folder,"/",results.folder,"/","Nearest Neighbour Sites.csv",sep=""))
    write.csv(tt2.dist,paste(name.results.folder,"/",results.folder,"/","Nearest Neighbour distances.csv",sep=""))
  }

  GIS.results[is.na(GIS.results)]<-0
  dist.results[is.na(dist.results)]<-0
  write.csv(dist.results,paste(name.results.folder,"/",results.folder,"/","Mahal Distances.csv",sep=""))
  write.csv(GIS.results,paste(name.results.folder,"/",results.folder,"/","GIS Results.csv",sep=""))
  write.csv(results,paste(name.results.folder,"/",results.folder,"/","RCA Metric Differences.csv",sep=""))

  #tkdestroy(ttmain5)
  ttmain6 <- tktoplevel()
  tkgrid(tklabel(ttmain6,text="Finished",font=fontHeading))
  tkfocus(ttmain6)

}

cat("\014")
################################## FINISHED #################################

#Startup loop
startup.order<-c("Splash Screen","Body","Menu")
for (start in startup.order){
  if (start=="Splash Screen"){



    Splash<-tktoplevel()
    tktitle(Splash)<-"RCA"
    tkgrid(tklabel(Splash,text="Automated Reference Condition Approach and \nTest Site Analysis",font=fontHeading))
    tkgrid(tklabel(Splash, text=" "))
    tkgrid(tklabel(Splash, text="Developed by Patrick Schaefer - please do not copy or distribute without permission
                   \nFor assistance contact: patrick.schaefer@mail.utoronto.ca
                   \n################################################################################",font=fontSubHeading))
    tkgrid(tklabel(Splash, text="\nTSA algorithems by Chris Jones (MOECC -f.chris.jones@ontario.ca, 705 766-1724), adapted from:"),sticky="w")
    tkgrid(tklabel(Splash, text="\nBowman, MF and KM Somers.2006. Evaluating a Novel Test Site Analysis (TSA)"),sticky="w")
    tkgrid(tklabel(Splash, text="\nbioassessment approach. Journal of the North American Benthological"),sticky="w")
    tkgrid(tklabel(Splash, text="\nSociety 25(3):712-727"),sticky="w")
    tkfocus(Splash)
    tkdestroy(Splash)
  }
  if (start=="Body") {

  }
  if (start=="Menu"){

    ttmain <- tktoplevel()
    tktitle(ttmain)<-"RCA"
    tkgrid(tklabel(ttmain,text="Automated Reference Condition Approach and \nTest Site Analysis",font=fontHeading))

    tkgrid(tklabel(ttmain,text=" "))
    bmi.rb <- tkradiobutton(ttmain)
    fish.rb <- tkradiobutton(ttmain)
    rbValue <- tclVar("BMI")
    tkconfigure(bmi.rb,variable=rbValue,value="BMI")
    tkconfigure(fish.rb,variable=rbValue,value="Fish")

    tkgrid(tklabel(ttmain,text="Type of biological data?",font=fontSubHeading))
    tkgrid(tklabel(ttmain,text=" "))
    tkgrid(tklabel(ttmain,text="Benthic Macroinvertebrates "),bmi.rb)
    tkgrid(tklabel(ttmain,text="Fish (experimental)"),fish.rb)
    tkgrid(tklabel(ttmain,text=" "))
    tkgrid(tkbutton(ttmain,text="OK",command=BMI.vs.Fish))
    tkfocus(ttmain)


  }

}



